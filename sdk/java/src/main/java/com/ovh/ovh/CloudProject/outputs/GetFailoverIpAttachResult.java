// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovh.ovh.CloudProject.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetFailoverIpAttachResult {
    /**
     * @return The IP block
     * * `continentCode` - The Ip continent
     * 
     */
    private String block;
    private String continentCode;
    private String geoLoc;
    /**
     * @return The Ip id
     * 
     */
    private String id;
    /**
     * @return The Ip Address
     * 
     */
    private String ip;
    /**
     * @return Current operation progress in percent
     * * `routedTo` - Instance where ip is routed to
     * 
     */
    private Integer progress;
    private String routedTo;
    private String serviceName;
    /**
     * @return Ip status, can be `ok` or `operationPending`
     * * `subType` - IP sub type, can be `cloud` or `ovh`
     * 
     */
    private String status;
    private String subType;

    private GetFailoverIpAttachResult() {}
    /**
     * @return The IP block
     * * `continentCode` - The Ip continent
     * 
     */
    public String block() {
        return this.block;
    }
    public String continentCode() {
        return this.continentCode;
    }
    public String geoLoc() {
        return this.geoLoc;
    }
    /**
     * @return The Ip id
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The Ip Address
     * 
     */
    public String ip() {
        return this.ip;
    }
    /**
     * @return Current operation progress in percent
     * * `routedTo` - Instance where ip is routed to
     * 
     */
    public Integer progress() {
        return this.progress;
    }
    public String routedTo() {
        return this.routedTo;
    }
    public String serviceName() {
        return this.serviceName;
    }
    /**
     * @return Ip status, can be `ok` or `operationPending`
     * * `subType` - IP sub type, can be `cloud` or `ovh`
     * 
     */
    public String status() {
        return this.status;
    }
    public String subType() {
        return this.subType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFailoverIpAttachResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String block;
        private String continentCode;
        private String geoLoc;
        private String id;
        private String ip;
        private Integer progress;
        private String routedTo;
        private String serviceName;
        private String status;
        private String subType;
        public Builder() {}
        public Builder(GetFailoverIpAttachResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.block = defaults.block;
    	      this.continentCode = defaults.continentCode;
    	      this.geoLoc = defaults.geoLoc;
    	      this.id = defaults.id;
    	      this.ip = defaults.ip;
    	      this.progress = defaults.progress;
    	      this.routedTo = defaults.routedTo;
    	      this.serviceName = defaults.serviceName;
    	      this.status = defaults.status;
    	      this.subType = defaults.subType;
        }

        @CustomType.Setter
        public Builder block(String block) {
            if (block == null) {
              throw new MissingRequiredPropertyException("GetFailoverIpAttachResult", "block");
            }
            this.block = block;
            return this;
        }
        @CustomType.Setter
        public Builder continentCode(String continentCode) {
            if (continentCode == null) {
              throw new MissingRequiredPropertyException("GetFailoverIpAttachResult", "continentCode");
            }
            this.continentCode = continentCode;
            return this;
        }
        @CustomType.Setter
        public Builder geoLoc(String geoLoc) {
            if (geoLoc == null) {
              throw new MissingRequiredPropertyException("GetFailoverIpAttachResult", "geoLoc");
            }
            this.geoLoc = geoLoc;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetFailoverIpAttachResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ip(String ip) {
            if (ip == null) {
              throw new MissingRequiredPropertyException("GetFailoverIpAttachResult", "ip");
            }
            this.ip = ip;
            return this;
        }
        @CustomType.Setter
        public Builder progress(Integer progress) {
            if (progress == null) {
              throw new MissingRequiredPropertyException("GetFailoverIpAttachResult", "progress");
            }
            this.progress = progress;
            return this;
        }
        @CustomType.Setter
        public Builder routedTo(String routedTo) {
            if (routedTo == null) {
              throw new MissingRequiredPropertyException("GetFailoverIpAttachResult", "routedTo");
            }
            this.routedTo = routedTo;
            return this;
        }
        @CustomType.Setter
        public Builder serviceName(String serviceName) {
            if (serviceName == null) {
              throw new MissingRequiredPropertyException("GetFailoverIpAttachResult", "serviceName");
            }
            this.serviceName = serviceName;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetFailoverIpAttachResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder subType(String subType) {
            if (subType == null) {
              throw new MissingRequiredPropertyException("GetFailoverIpAttachResult", "subType");
            }
            this.subType = subType;
            return this;
        }
        public GetFailoverIpAttachResult build() {
            final var _resultValue = new GetFailoverIpAttachResult();
            _resultValue.block = block;
            _resultValue.continentCode = continentCode;
            _resultValue.geoLoc = geoLoc;
            _resultValue.id = id;
            _resultValue.ip = ip;
            _resultValue.progress = progress;
            _resultValue.routedTo = routedTo;
            _resultValue.serviceName = serviceName;
            _resultValue.status = status;
            _resultValue.subType = subType;
            return _resultValue;
        }
    }
}
