// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovh.ovh.Dedicated.outputs;

import com.ovh.ovh.Dedicated.outputs.GetServerSpecificationsHardwareDefaultHardwareRaidSize;
import com.ovh.ovh.Dedicated.outputs.GetServerSpecificationsHardwareDiskGroup;
import com.ovh.ovh.Dedicated.outputs.GetServerSpecificationsHardwareExpansionCard;
import com.ovh.ovh.Dedicated.outputs.GetServerSpecificationsHardwareMemorySize;
import com.ovh.ovh.Dedicated.outputs.GetServerSpecificationsHardwareUsbKey;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServerSpecificationsHardwareResult {
    /**
     * @return Server boot mode
     * 
     */
    private String bootMode;
    /**
     * @return Number of cores per processor
     * 
     */
    private Double coresPerProcessor;
    /**
     * @return Default hardware raid size for this disk group
     * 
     */
    private GetServerSpecificationsHardwareDefaultHardwareRaidSize defaultHardwareRaidSize;
    /**
     * @return Default hardware raid type for this disk group
     * 
     */
    private String defaultHardwareRaidType;
    /**
     * @return Expansion card description
     * 
     */
    private String description;
    /**
     * @return Details about the groups of disks in the server
     * 
     */
    private List<GetServerSpecificationsHardwareDiskGroup> diskGroups;
    /**
     * @return Details about the server&#39;s expansion cards
     * 
     */
    private List<GetServerSpecificationsHardwareExpansionCard> expansionCards;
    /**
     * @return Server form factor
     * 
     */
    private String formFactor;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return RAM capacity
     * 
     */
    private GetServerSpecificationsHardwareMemorySize memorySize;
    /**
     * @return Server motherboard
     * 
     */
    private String motherboard;
    /**
     * @return Number of processors in this dedicated server
     * 
     */
    private Double numberOfProcessors;
    /**
     * @return Processor architecture bit
     * 
     */
    private String processorArchitecture;
    /**
     * @return Processor name
     * 
     */
    private String processorName;
    private String serviceName;
    /**
     * @return Number of threads per processor
     * 
     */
    private Double threadsPerProcessor;
    /**
     * @return Capacity of the USB keys installed on your server, if any
     * 
     */
    private List<GetServerSpecificationsHardwareUsbKey> usbKeys;

    private GetServerSpecificationsHardwareResult() {}
    /**
     * @return Server boot mode
     * 
     */
    public String bootMode() {
        return this.bootMode;
    }
    /**
     * @return Number of cores per processor
     * 
     */
    public Double coresPerProcessor() {
        return this.coresPerProcessor;
    }
    /**
     * @return Default hardware raid size for this disk group
     * 
     */
    public GetServerSpecificationsHardwareDefaultHardwareRaidSize defaultHardwareRaidSize() {
        return this.defaultHardwareRaidSize;
    }
    /**
     * @return Default hardware raid type for this disk group
     * 
     */
    public String defaultHardwareRaidType() {
        return this.defaultHardwareRaidType;
    }
    /**
     * @return Expansion card description
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Details about the groups of disks in the server
     * 
     */
    public List<GetServerSpecificationsHardwareDiskGroup> diskGroups() {
        return this.diskGroups;
    }
    /**
     * @return Details about the server&#39;s expansion cards
     * 
     */
    public List<GetServerSpecificationsHardwareExpansionCard> expansionCards() {
        return this.expansionCards;
    }
    /**
     * @return Server form factor
     * 
     */
    public String formFactor() {
        return this.formFactor;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return RAM capacity
     * 
     */
    public GetServerSpecificationsHardwareMemorySize memorySize() {
        return this.memorySize;
    }
    /**
     * @return Server motherboard
     * 
     */
    public String motherboard() {
        return this.motherboard;
    }
    /**
     * @return Number of processors in this dedicated server
     * 
     */
    public Double numberOfProcessors() {
        return this.numberOfProcessors;
    }
    /**
     * @return Processor architecture bit
     * 
     */
    public String processorArchitecture() {
        return this.processorArchitecture;
    }
    /**
     * @return Processor name
     * 
     */
    public String processorName() {
        return this.processorName;
    }
    public String serviceName() {
        return this.serviceName;
    }
    /**
     * @return Number of threads per processor
     * 
     */
    public Double threadsPerProcessor() {
        return this.threadsPerProcessor;
    }
    /**
     * @return Capacity of the USB keys installed on your server, if any
     * 
     */
    public List<GetServerSpecificationsHardwareUsbKey> usbKeys() {
        return this.usbKeys;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServerSpecificationsHardwareResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bootMode;
        private Double coresPerProcessor;
        private GetServerSpecificationsHardwareDefaultHardwareRaidSize defaultHardwareRaidSize;
        private String defaultHardwareRaidType;
        private String description;
        private List<GetServerSpecificationsHardwareDiskGroup> diskGroups;
        private List<GetServerSpecificationsHardwareExpansionCard> expansionCards;
        private String formFactor;
        private String id;
        private GetServerSpecificationsHardwareMemorySize memorySize;
        private String motherboard;
        private Double numberOfProcessors;
        private String processorArchitecture;
        private String processorName;
        private String serviceName;
        private Double threadsPerProcessor;
        private List<GetServerSpecificationsHardwareUsbKey> usbKeys;
        public Builder() {}
        public Builder(GetServerSpecificationsHardwareResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bootMode = defaults.bootMode;
    	      this.coresPerProcessor = defaults.coresPerProcessor;
    	      this.defaultHardwareRaidSize = defaults.defaultHardwareRaidSize;
    	      this.defaultHardwareRaidType = defaults.defaultHardwareRaidType;
    	      this.description = defaults.description;
    	      this.diskGroups = defaults.diskGroups;
    	      this.expansionCards = defaults.expansionCards;
    	      this.formFactor = defaults.formFactor;
    	      this.id = defaults.id;
    	      this.memorySize = defaults.memorySize;
    	      this.motherboard = defaults.motherboard;
    	      this.numberOfProcessors = defaults.numberOfProcessors;
    	      this.processorArchitecture = defaults.processorArchitecture;
    	      this.processorName = defaults.processorName;
    	      this.serviceName = defaults.serviceName;
    	      this.threadsPerProcessor = defaults.threadsPerProcessor;
    	      this.usbKeys = defaults.usbKeys;
        }

        @CustomType.Setter
        public Builder bootMode(String bootMode) {
            if (bootMode == null) {
              throw new MissingRequiredPropertyException("GetServerSpecificationsHardwareResult", "bootMode");
            }
            this.bootMode = bootMode;
            return this;
        }
        @CustomType.Setter
        public Builder coresPerProcessor(Double coresPerProcessor) {
            if (coresPerProcessor == null) {
              throw new MissingRequiredPropertyException("GetServerSpecificationsHardwareResult", "coresPerProcessor");
            }
            this.coresPerProcessor = coresPerProcessor;
            return this;
        }
        @CustomType.Setter
        public Builder defaultHardwareRaidSize(GetServerSpecificationsHardwareDefaultHardwareRaidSize defaultHardwareRaidSize) {
            if (defaultHardwareRaidSize == null) {
              throw new MissingRequiredPropertyException("GetServerSpecificationsHardwareResult", "defaultHardwareRaidSize");
            }
            this.defaultHardwareRaidSize = defaultHardwareRaidSize;
            return this;
        }
        @CustomType.Setter
        public Builder defaultHardwareRaidType(String defaultHardwareRaidType) {
            if (defaultHardwareRaidType == null) {
              throw new MissingRequiredPropertyException("GetServerSpecificationsHardwareResult", "defaultHardwareRaidType");
            }
            this.defaultHardwareRaidType = defaultHardwareRaidType;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetServerSpecificationsHardwareResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder diskGroups(List<GetServerSpecificationsHardwareDiskGroup> diskGroups) {
            if (diskGroups == null) {
              throw new MissingRequiredPropertyException("GetServerSpecificationsHardwareResult", "diskGroups");
            }
            this.diskGroups = diskGroups;
            return this;
        }
        public Builder diskGroups(GetServerSpecificationsHardwareDiskGroup... diskGroups) {
            return diskGroups(List.of(diskGroups));
        }
        @CustomType.Setter
        public Builder expansionCards(List<GetServerSpecificationsHardwareExpansionCard> expansionCards) {
            if (expansionCards == null) {
              throw new MissingRequiredPropertyException("GetServerSpecificationsHardwareResult", "expansionCards");
            }
            this.expansionCards = expansionCards;
            return this;
        }
        public Builder expansionCards(GetServerSpecificationsHardwareExpansionCard... expansionCards) {
            return expansionCards(List.of(expansionCards));
        }
        @CustomType.Setter
        public Builder formFactor(String formFactor) {
            if (formFactor == null) {
              throw new MissingRequiredPropertyException("GetServerSpecificationsHardwareResult", "formFactor");
            }
            this.formFactor = formFactor;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServerSpecificationsHardwareResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder memorySize(GetServerSpecificationsHardwareMemorySize memorySize) {
            if (memorySize == null) {
              throw new MissingRequiredPropertyException("GetServerSpecificationsHardwareResult", "memorySize");
            }
            this.memorySize = memorySize;
            return this;
        }
        @CustomType.Setter
        public Builder motherboard(String motherboard) {
            if (motherboard == null) {
              throw new MissingRequiredPropertyException("GetServerSpecificationsHardwareResult", "motherboard");
            }
            this.motherboard = motherboard;
            return this;
        }
        @CustomType.Setter
        public Builder numberOfProcessors(Double numberOfProcessors) {
            if (numberOfProcessors == null) {
              throw new MissingRequiredPropertyException("GetServerSpecificationsHardwareResult", "numberOfProcessors");
            }
            this.numberOfProcessors = numberOfProcessors;
            return this;
        }
        @CustomType.Setter
        public Builder processorArchitecture(String processorArchitecture) {
            if (processorArchitecture == null) {
              throw new MissingRequiredPropertyException("GetServerSpecificationsHardwareResult", "processorArchitecture");
            }
            this.processorArchitecture = processorArchitecture;
            return this;
        }
        @CustomType.Setter
        public Builder processorName(String processorName) {
            if (processorName == null) {
              throw new MissingRequiredPropertyException("GetServerSpecificationsHardwareResult", "processorName");
            }
            this.processorName = processorName;
            return this;
        }
        @CustomType.Setter
        public Builder serviceName(String serviceName) {
            if (serviceName == null) {
              throw new MissingRequiredPropertyException("GetServerSpecificationsHardwareResult", "serviceName");
            }
            this.serviceName = serviceName;
            return this;
        }
        @CustomType.Setter
        public Builder threadsPerProcessor(Double threadsPerProcessor) {
            if (threadsPerProcessor == null) {
              throw new MissingRequiredPropertyException("GetServerSpecificationsHardwareResult", "threadsPerProcessor");
            }
            this.threadsPerProcessor = threadsPerProcessor;
            return this;
        }
        @CustomType.Setter
        public Builder usbKeys(List<GetServerSpecificationsHardwareUsbKey> usbKeys) {
            if (usbKeys == null) {
              throw new MissingRequiredPropertyException("GetServerSpecificationsHardwareResult", "usbKeys");
            }
            this.usbKeys = usbKeys;
            return this;
        }
        public Builder usbKeys(GetServerSpecificationsHardwareUsbKey... usbKeys) {
            return usbKeys(List.of(usbKeys));
        }
        public GetServerSpecificationsHardwareResult build() {
            final var _resultValue = new GetServerSpecificationsHardwareResult();
            _resultValue.bootMode = bootMode;
            _resultValue.coresPerProcessor = coresPerProcessor;
            _resultValue.defaultHardwareRaidSize = defaultHardwareRaidSize;
            _resultValue.defaultHardwareRaidType = defaultHardwareRaidType;
            _resultValue.description = description;
            _resultValue.diskGroups = diskGroups;
            _resultValue.expansionCards = expansionCards;
            _resultValue.formFactor = formFactor;
            _resultValue.id = id;
            _resultValue.memorySize = memorySize;
            _resultValue.motherboard = motherboard;
            _resultValue.numberOfProcessors = numberOfProcessors;
            _resultValue.processorArchitecture = processorArchitecture;
            _resultValue.processorName = processorName;
            _resultValue.serviceName = serviceName;
            _resultValue.threadsPerProcessor = threadsPerProcessor;
            _resultValue.usbKeys = usbKeys;
            return _resultValue;
        }
    }
}
