// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovh.ovh.Me.inputs;

import com.ovh.ovh.Me.inputs.InstallationTemplateCustomizationArgs;
import com.ovh.ovh.Me.inputs.InstallationTemplateInputArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstallationTemplateState extends com.pulumi.resources.ResourceArgs {

    public static final InstallationTemplateState Empty = new InstallationTemplateState();

    /**
     * The name of an existing installation template, choose one among the list given by `ovh.getInstallationTemplates` datasource.
     * 
     */
    @Import(name="baseTemplateName")
    private @Nullable Output<String> baseTemplateName;

    /**
     * @return The name of an existing installation template, choose one among the list given by `ovh.getInstallationTemplates` datasource.
     * 
     */
    public Optional<Output<String>> baseTemplateName() {
        return Optional.ofNullable(this.baseTemplateName);
    }

    /**
     * This template bit format (32 or 64).
     * 
     */
    @Import(name="bitFormat")
    private @Nullable Output<Integer> bitFormat;

    /**
     * @return This template bit format (32 or 64).
     * 
     */
    public Optional<Output<Integer>> bitFormat() {
        return Optional.ofNullable(this.bitFormat);
    }

    /**
     * Category of this template (informative only). (basic, customer, hosting, other, readyToUse, virtualisation).
     * 
     */
    @Import(name="category")
    private @Nullable Output<String> category;

    /**
     * @return Category of this template (informative only). (basic, customer, hosting, other, readyToUse, virtualisation).
     * 
     */
    public Optional<Output<String>> category() {
        return Optional.ofNullable(this.category);
    }

    @Import(name="customization")
    private @Nullable Output<InstallationTemplateCustomizationArgs> customization;

    public Optional<Output<InstallationTemplateCustomizationArgs>> customization() {
        return Optional.ofNullable(this.customization);
    }

    /**
     * information about this template.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return information about this template.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * the distribution this template is based on.
     * 
     */
    @Import(name="distribution")
    private @Nullable Output<String> distribution;

    /**
     * @return the distribution this template is based on.
     * 
     */
    public Optional<Output<String>> distribution() {
        return Optional.ofNullable(this.distribution);
    }

    /**
     * after this date, install of this template will not be possible at OVH
     * 
     */
    @Import(name="endOfInstall")
    private @Nullable Output<String> endOfInstall;

    /**
     * @return after this date, install of this template will not be possible at OVH
     * 
     */
    public Optional<Output<String>> endOfInstall() {
        return Optional.ofNullable(this.endOfInstall);
    }

    /**
     * this template family type.
     * 
     */
    @Import(name="family")
    private @Nullable Output<String> family;

    /**
     * @return this template family type.
     * 
     */
    public Optional<Output<String>> family() {
        return Optional.ofNullable(this.family);
    }

    /**
     * Filesystems available.
     * 
     */
    @Import(name="filesystems")
    private @Nullable Output<List<String>> filesystems;

    /**
     * @return Filesystems available.
     * 
     */
    public Optional<Output<List<String>>> filesystems() {
        return Optional.ofNullable(this.filesystems);
    }

    /**
     * This distribution supports hardware raid configuration through the OVHcloud API. Deprecated, will be removed in next release.
     * 
     * @deprecated
     * This will be deprecated in the next release
     * 
     */
    @Deprecated /* This will be deprecated in the next release */
    @Import(name="hardRaidConfiguration")
    private @Nullable Output<Boolean> hardRaidConfiguration;

    /**
     * @return This distribution supports hardware raid configuration through the OVHcloud API. Deprecated, will be removed in next release.
     * 
     * @deprecated
     * This will be deprecated in the next release
     * 
     */
    @Deprecated /* This will be deprecated in the next release */
    public Optional<Output<Boolean>> hardRaidConfiguration() {
        return Optional.ofNullable(this.hardRaidConfiguration);
    }

    @Import(name="inputs")
    private @Nullable Output<List<InstallationTemplateInputArgs>> inputs;

    public Optional<Output<List<InstallationTemplateInputArgs>>> inputs() {
        return Optional.ofNullable(this.inputs);
    }

    /**
     * Whether this distribution supports Logical Volumes (Linux LVM)
     * 
     */
    @Import(name="lvmReady")
    private @Nullable Output<Boolean> lvmReady;

    /**
     * @return Whether this distribution supports Logical Volumes (Linux LVM)
     * 
     */
    public Optional<Output<Boolean>> lvmReady() {
        return Optional.ofNullable(this.lvmReady);
    }

    /**
     * Partitioning customization is not available for this OS template
     * 
     */
    @Import(name="noPartitioning")
    private @Nullable Output<Boolean> noPartitioning;

    /**
     * @return Partitioning customization is not available for this OS template
     * 
     */
    public Optional<Output<Boolean>> noPartitioning() {
        return Optional.ofNullable(this.noPartitioning);
    }

    /**
     * Remove default partition schemes at creation.
     * 
     */
    @Import(name="removeDefaultPartitionSchemes")
    private @Nullable Output<Boolean> removeDefaultPartitionSchemes;

    /**
     * @return Remove default partition schemes at creation.
     * 
     */
    public Optional<Output<Boolean>> removeDefaultPartitionSchemes() {
        return Optional.ofNullable(this.removeDefaultPartitionSchemes);
    }

    /**
     * Partitioning customization is available but limited to mirroring for this OS template
     * 
     */
    @Import(name="softRaidOnlyMirroring")
    private @Nullable Output<Boolean> softRaidOnlyMirroring;

    /**
     * @return Partitioning customization is available but limited to mirroring for this OS template
     * 
     */
    public Optional<Output<Boolean>> softRaidOnlyMirroring() {
        return Optional.ofNullable(this.softRaidOnlyMirroring);
    }

    /**
     * this template subfamily type
     * 
     */
    @Import(name="subfamily")
    private @Nullable Output<String> subfamily;

    /**
     * @return this template subfamily type
     * 
     */
    public Optional<Output<String>> subfamily() {
        return Optional.ofNullable(this.subfamily);
    }

    /**
     * This template name.
     * 
     */
    @Import(name="templateName")
    private @Nullable Output<String> templateName;

    /**
     * @return This template name.
     * 
     */
    public Optional<Output<String>> templateName() {
        return Optional.ofNullable(this.templateName);
    }

    private InstallationTemplateState() {}

    private InstallationTemplateState(InstallationTemplateState $) {
        this.baseTemplateName = $.baseTemplateName;
        this.bitFormat = $.bitFormat;
        this.category = $.category;
        this.customization = $.customization;
        this.description = $.description;
        this.distribution = $.distribution;
        this.endOfInstall = $.endOfInstall;
        this.family = $.family;
        this.filesystems = $.filesystems;
        this.hardRaidConfiguration = $.hardRaidConfiguration;
        this.inputs = $.inputs;
        this.lvmReady = $.lvmReady;
        this.noPartitioning = $.noPartitioning;
        this.removeDefaultPartitionSchemes = $.removeDefaultPartitionSchemes;
        this.softRaidOnlyMirroring = $.softRaidOnlyMirroring;
        this.subfamily = $.subfamily;
        this.templateName = $.templateName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstallationTemplateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstallationTemplateState $;

        public Builder() {
            $ = new InstallationTemplateState();
        }

        public Builder(InstallationTemplateState defaults) {
            $ = new InstallationTemplateState(Objects.requireNonNull(defaults));
        }

        /**
         * @param baseTemplateName The name of an existing installation template, choose one among the list given by `ovh.getInstallationTemplates` datasource.
         * 
         * @return builder
         * 
         */
        public Builder baseTemplateName(@Nullable Output<String> baseTemplateName) {
            $.baseTemplateName = baseTemplateName;
            return this;
        }

        /**
         * @param baseTemplateName The name of an existing installation template, choose one among the list given by `ovh.getInstallationTemplates` datasource.
         * 
         * @return builder
         * 
         */
        public Builder baseTemplateName(String baseTemplateName) {
            return baseTemplateName(Output.of(baseTemplateName));
        }

        /**
         * @param bitFormat This template bit format (32 or 64).
         * 
         * @return builder
         * 
         */
        public Builder bitFormat(@Nullable Output<Integer> bitFormat) {
            $.bitFormat = bitFormat;
            return this;
        }

        /**
         * @param bitFormat This template bit format (32 or 64).
         * 
         * @return builder
         * 
         */
        public Builder bitFormat(Integer bitFormat) {
            return bitFormat(Output.of(bitFormat));
        }

        /**
         * @param category Category of this template (informative only). (basic, customer, hosting, other, readyToUse, virtualisation).
         * 
         * @return builder
         * 
         */
        public Builder category(@Nullable Output<String> category) {
            $.category = category;
            return this;
        }

        /**
         * @param category Category of this template (informative only). (basic, customer, hosting, other, readyToUse, virtualisation).
         * 
         * @return builder
         * 
         */
        public Builder category(String category) {
            return category(Output.of(category));
        }

        public Builder customization(@Nullable Output<InstallationTemplateCustomizationArgs> customization) {
            $.customization = customization;
            return this;
        }

        public Builder customization(InstallationTemplateCustomizationArgs customization) {
            return customization(Output.of(customization));
        }

        /**
         * @param description information about this template.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description information about this template.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param distribution the distribution this template is based on.
         * 
         * @return builder
         * 
         */
        public Builder distribution(@Nullable Output<String> distribution) {
            $.distribution = distribution;
            return this;
        }

        /**
         * @param distribution the distribution this template is based on.
         * 
         * @return builder
         * 
         */
        public Builder distribution(String distribution) {
            return distribution(Output.of(distribution));
        }

        /**
         * @param endOfInstall after this date, install of this template will not be possible at OVH
         * 
         * @return builder
         * 
         */
        public Builder endOfInstall(@Nullable Output<String> endOfInstall) {
            $.endOfInstall = endOfInstall;
            return this;
        }

        /**
         * @param endOfInstall after this date, install of this template will not be possible at OVH
         * 
         * @return builder
         * 
         */
        public Builder endOfInstall(String endOfInstall) {
            return endOfInstall(Output.of(endOfInstall));
        }

        /**
         * @param family this template family type.
         * 
         * @return builder
         * 
         */
        public Builder family(@Nullable Output<String> family) {
            $.family = family;
            return this;
        }

        /**
         * @param family this template family type.
         * 
         * @return builder
         * 
         */
        public Builder family(String family) {
            return family(Output.of(family));
        }

        /**
         * @param filesystems Filesystems available.
         * 
         * @return builder
         * 
         */
        public Builder filesystems(@Nullable Output<List<String>> filesystems) {
            $.filesystems = filesystems;
            return this;
        }

        /**
         * @param filesystems Filesystems available.
         * 
         * @return builder
         * 
         */
        public Builder filesystems(List<String> filesystems) {
            return filesystems(Output.of(filesystems));
        }

        /**
         * @param filesystems Filesystems available.
         * 
         * @return builder
         * 
         */
        public Builder filesystems(String... filesystems) {
            return filesystems(List.of(filesystems));
        }

        /**
         * @param hardRaidConfiguration This distribution supports hardware raid configuration through the OVHcloud API. Deprecated, will be removed in next release.
         * 
         * @return builder
         * 
         * @deprecated
         * This will be deprecated in the next release
         * 
         */
        @Deprecated /* This will be deprecated in the next release */
        public Builder hardRaidConfiguration(@Nullable Output<Boolean> hardRaidConfiguration) {
            $.hardRaidConfiguration = hardRaidConfiguration;
            return this;
        }

        /**
         * @param hardRaidConfiguration This distribution supports hardware raid configuration through the OVHcloud API. Deprecated, will be removed in next release.
         * 
         * @return builder
         * 
         * @deprecated
         * This will be deprecated in the next release
         * 
         */
        @Deprecated /* This will be deprecated in the next release */
        public Builder hardRaidConfiguration(Boolean hardRaidConfiguration) {
            return hardRaidConfiguration(Output.of(hardRaidConfiguration));
        }

        public Builder inputs(@Nullable Output<List<InstallationTemplateInputArgs>> inputs) {
            $.inputs = inputs;
            return this;
        }

        public Builder inputs(List<InstallationTemplateInputArgs> inputs) {
            return inputs(Output.of(inputs));
        }

        public Builder inputs(InstallationTemplateInputArgs... inputs) {
            return inputs(List.of(inputs));
        }

        /**
         * @param lvmReady Whether this distribution supports Logical Volumes (Linux LVM)
         * 
         * @return builder
         * 
         */
        public Builder lvmReady(@Nullable Output<Boolean> lvmReady) {
            $.lvmReady = lvmReady;
            return this;
        }

        /**
         * @param lvmReady Whether this distribution supports Logical Volumes (Linux LVM)
         * 
         * @return builder
         * 
         */
        public Builder lvmReady(Boolean lvmReady) {
            return lvmReady(Output.of(lvmReady));
        }

        /**
         * @param noPartitioning Partitioning customization is not available for this OS template
         * 
         * @return builder
         * 
         */
        public Builder noPartitioning(@Nullable Output<Boolean> noPartitioning) {
            $.noPartitioning = noPartitioning;
            return this;
        }

        /**
         * @param noPartitioning Partitioning customization is not available for this OS template
         * 
         * @return builder
         * 
         */
        public Builder noPartitioning(Boolean noPartitioning) {
            return noPartitioning(Output.of(noPartitioning));
        }

        /**
         * @param removeDefaultPartitionSchemes Remove default partition schemes at creation.
         * 
         * @return builder
         * 
         */
        public Builder removeDefaultPartitionSchemes(@Nullable Output<Boolean> removeDefaultPartitionSchemes) {
            $.removeDefaultPartitionSchemes = removeDefaultPartitionSchemes;
            return this;
        }

        /**
         * @param removeDefaultPartitionSchemes Remove default partition schemes at creation.
         * 
         * @return builder
         * 
         */
        public Builder removeDefaultPartitionSchemes(Boolean removeDefaultPartitionSchemes) {
            return removeDefaultPartitionSchemes(Output.of(removeDefaultPartitionSchemes));
        }

        /**
         * @param softRaidOnlyMirroring Partitioning customization is available but limited to mirroring for this OS template
         * 
         * @return builder
         * 
         */
        public Builder softRaidOnlyMirroring(@Nullable Output<Boolean> softRaidOnlyMirroring) {
            $.softRaidOnlyMirroring = softRaidOnlyMirroring;
            return this;
        }

        /**
         * @param softRaidOnlyMirroring Partitioning customization is available but limited to mirroring for this OS template
         * 
         * @return builder
         * 
         */
        public Builder softRaidOnlyMirroring(Boolean softRaidOnlyMirroring) {
            return softRaidOnlyMirroring(Output.of(softRaidOnlyMirroring));
        }

        /**
         * @param subfamily this template subfamily type
         * 
         * @return builder
         * 
         */
        public Builder subfamily(@Nullable Output<String> subfamily) {
            $.subfamily = subfamily;
            return this;
        }

        /**
         * @param subfamily this template subfamily type
         * 
         * @return builder
         * 
         */
        public Builder subfamily(String subfamily) {
            return subfamily(Output.of(subfamily));
        }

        /**
         * @param templateName This template name.
         * 
         * @return builder
         * 
         */
        public Builder templateName(@Nullable Output<String> templateName) {
            $.templateName = templateName;
            return this;
        }

        /**
         * @param templateName This template name.
         * 
         * @return builder
         * 
         */
        public Builder templateName(String templateName) {
            return templateName(Output.of(templateName));
        }

        public InstallationTemplateState build() {
            return $;
        }
    }

}
