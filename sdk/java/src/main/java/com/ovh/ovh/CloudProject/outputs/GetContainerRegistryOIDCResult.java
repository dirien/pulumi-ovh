// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovh.ovh.CloudProject.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetContainerRegistryOIDCResult {
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Specify an OIDC admin group name. All OIDC users in this group will have harbor admin privilege. Keep it blank if you do not want to.
     * 
     */
    private @Nullable String oidcAdminGroup;
    /**
     * @return Skip the onboarding screen, so user cannot change its username. Username is provided from ID Token.
     * 
     */
    private @Nullable Boolean oidcAutoOnboard;
    /**
     * @return The client ID with which Harbor is registered as client application with the OIDC provider.
     * 
     */
    private @Nullable String oidcClientId;
    /**
     * @return The URL of an OIDC-compliant server.
     * 
     */
    private @Nullable String oidcEndpoint;
    /**
     * @return The name of Claim in the ID token whose value is the list of group names.
     * 
     */
    private @Nullable String oidcGroupsClaim;
    /**
     * @return The name of the OIDC provider.
     * 
     */
    private @Nullable String oidcName;
    /**
     * @return The scope sent to OIDC server during authentication. It&#39;s a comma-separated string that must contain &#39;openid&#39; and usually also contains &#39;profile&#39; and &#39;email&#39;. To obtain refresh tokens it should also contain &#39;offline_access&#39;.
     * 
     */
    private @Nullable String oidcScope;
    /**
     * @return The name of the claim in the ID Token where the username is retrieved from. If not specified, it will default to &#39;name&#39; (only useful when automatic Onboarding is enabled).
     * 
     */
    private @Nullable String oidcUserClaim;
    /**
     * @return Set it to `false` if your OIDC server is hosted via self-signed certificate.
     * 
     */
    private @Nullable Boolean oidcVerifyCert;
    /**
     * @return The ID of the Managed Private Registry.
     * 
     */
    private String registryId;
    /**
     * @return The ID of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
     * 
     */
    private String serviceName;

    private GetContainerRegistryOIDCResult() {}
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Specify an OIDC admin group name. All OIDC users in this group will have harbor admin privilege. Keep it blank if you do not want to.
     * 
     */
    public Optional<String> oidcAdminGroup() {
        return Optional.ofNullable(this.oidcAdminGroup);
    }
    /**
     * @return Skip the onboarding screen, so user cannot change its username. Username is provided from ID Token.
     * 
     */
    public Optional<Boolean> oidcAutoOnboard() {
        return Optional.ofNullable(this.oidcAutoOnboard);
    }
    /**
     * @return The client ID with which Harbor is registered as client application with the OIDC provider.
     * 
     */
    public Optional<String> oidcClientId() {
        return Optional.ofNullable(this.oidcClientId);
    }
    /**
     * @return The URL of an OIDC-compliant server.
     * 
     */
    public Optional<String> oidcEndpoint() {
        return Optional.ofNullable(this.oidcEndpoint);
    }
    /**
     * @return The name of Claim in the ID token whose value is the list of group names.
     * 
     */
    public Optional<String> oidcGroupsClaim() {
        return Optional.ofNullable(this.oidcGroupsClaim);
    }
    /**
     * @return The name of the OIDC provider.
     * 
     */
    public Optional<String> oidcName() {
        return Optional.ofNullable(this.oidcName);
    }
    /**
     * @return The scope sent to OIDC server during authentication. It&#39;s a comma-separated string that must contain &#39;openid&#39; and usually also contains &#39;profile&#39; and &#39;email&#39;. To obtain refresh tokens it should also contain &#39;offline_access&#39;.
     * 
     */
    public Optional<String> oidcScope() {
        return Optional.ofNullable(this.oidcScope);
    }
    /**
     * @return The name of the claim in the ID Token where the username is retrieved from. If not specified, it will default to &#39;name&#39; (only useful when automatic Onboarding is enabled).
     * 
     */
    public Optional<String> oidcUserClaim() {
        return Optional.ofNullable(this.oidcUserClaim);
    }
    /**
     * @return Set it to `false` if your OIDC server is hosted via self-signed certificate.
     * 
     */
    public Optional<Boolean> oidcVerifyCert() {
        return Optional.ofNullable(this.oidcVerifyCert);
    }
    /**
     * @return The ID of the Managed Private Registry.
     * 
     */
    public String registryId() {
        return this.registryId;
    }
    /**
     * @return The ID of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
     * 
     */
    public String serviceName() {
        return this.serviceName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetContainerRegistryOIDCResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private @Nullable String oidcAdminGroup;
        private @Nullable Boolean oidcAutoOnboard;
        private @Nullable String oidcClientId;
        private @Nullable String oidcEndpoint;
        private @Nullable String oidcGroupsClaim;
        private @Nullable String oidcName;
        private @Nullable String oidcScope;
        private @Nullable String oidcUserClaim;
        private @Nullable Boolean oidcVerifyCert;
        private String registryId;
        private String serviceName;
        public Builder() {}
        public Builder(GetContainerRegistryOIDCResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.oidcAdminGroup = defaults.oidcAdminGroup;
    	      this.oidcAutoOnboard = defaults.oidcAutoOnboard;
    	      this.oidcClientId = defaults.oidcClientId;
    	      this.oidcEndpoint = defaults.oidcEndpoint;
    	      this.oidcGroupsClaim = defaults.oidcGroupsClaim;
    	      this.oidcName = defaults.oidcName;
    	      this.oidcScope = defaults.oidcScope;
    	      this.oidcUserClaim = defaults.oidcUserClaim;
    	      this.oidcVerifyCert = defaults.oidcVerifyCert;
    	      this.registryId = defaults.registryId;
    	      this.serviceName = defaults.serviceName;
        }

        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetContainerRegistryOIDCResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder oidcAdminGroup(@Nullable String oidcAdminGroup) {

            this.oidcAdminGroup = oidcAdminGroup;
            return this;
        }
        @CustomType.Setter
        public Builder oidcAutoOnboard(@Nullable Boolean oidcAutoOnboard) {

            this.oidcAutoOnboard = oidcAutoOnboard;
            return this;
        }
        @CustomType.Setter
        public Builder oidcClientId(@Nullable String oidcClientId) {

            this.oidcClientId = oidcClientId;
            return this;
        }
        @CustomType.Setter
        public Builder oidcEndpoint(@Nullable String oidcEndpoint) {

            this.oidcEndpoint = oidcEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder oidcGroupsClaim(@Nullable String oidcGroupsClaim) {

            this.oidcGroupsClaim = oidcGroupsClaim;
            return this;
        }
        @CustomType.Setter
        public Builder oidcName(@Nullable String oidcName) {

            this.oidcName = oidcName;
            return this;
        }
        @CustomType.Setter
        public Builder oidcScope(@Nullable String oidcScope) {

            this.oidcScope = oidcScope;
            return this;
        }
        @CustomType.Setter
        public Builder oidcUserClaim(@Nullable String oidcUserClaim) {

            this.oidcUserClaim = oidcUserClaim;
            return this;
        }
        @CustomType.Setter
        public Builder oidcVerifyCert(@Nullable Boolean oidcVerifyCert) {

            this.oidcVerifyCert = oidcVerifyCert;
            return this;
        }
        @CustomType.Setter
        public Builder registryId(String registryId) {
            if (registryId == null) {
              throw new MissingRequiredPropertyException("GetContainerRegistryOIDCResult", "registryId");
            }
            this.registryId = registryId;
            return this;
        }
        @CustomType.Setter
        public Builder serviceName(String serviceName) {
            if (serviceName == null) {
              throw new MissingRequiredPropertyException("GetContainerRegistryOIDCResult", "serviceName");
            }
            this.serviceName = serviceName;
            return this;
        }
        public GetContainerRegistryOIDCResult build() {
            final var _resultValue = new GetContainerRegistryOIDCResult();
            _resultValue.id = id;
            _resultValue.oidcAdminGroup = oidcAdminGroup;
            _resultValue.oidcAutoOnboard = oidcAutoOnboard;
            _resultValue.oidcClientId = oidcClientId;
            _resultValue.oidcEndpoint = oidcEndpoint;
            _resultValue.oidcGroupsClaim = oidcGroupsClaim;
            _resultValue.oidcName = oidcName;
            _resultValue.oidcScope = oidcScope;
            _resultValue.oidcUserClaim = oidcUserClaim;
            _resultValue.oidcVerifyCert = oidcVerifyCert;
            _resultValue.registryId = registryId;
            _resultValue.serviceName = serviceName;
            return _resultValue;
        }
    }
}
