// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovh.ovh.Vps.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VpsModelArgs extends com.pulumi.resources.ResourceArgs {

    public static final VpsModelArgs Empty = new VpsModelArgs();

    /**
     * All options the VPS can have (additionalDisk┃automatedBackup┃cpanel┃ftpbackup┃plesk┃snapshot┃veeam┃windows)
     * 
     */
    @Import(name="availableOptions")
    private @Nullable Output<List<String>> availableOptions;

    /**
     * @return All options the VPS can have (additionalDisk┃automatedBackup┃cpanel┃ftpbackup┃plesk┃snapshot┃veeam┃windows)
     * 
     */
    public Optional<Output<List<String>>> availableOptions() {
        return Optional.ofNullable(this.availableOptions);
    }

    /**
     * Datacenters where this model is available
     * 
     */
    @Import(name="datacenters")
    private @Nullable Output<List<String>> datacenters;

    /**
     * @return Datacenters where this model is available
     * 
     */
    public Optional<Output<List<String>>> datacenters() {
        return Optional.ofNullable(this.datacenters);
    }

    /**
     * Disk capacity of this VPS
     * 
     */
    @Import(name="disk")
    private @Nullable Output<Double> disk;

    /**
     * @return Disk capacity of this VPS
     * 
     */
    public Optional<Output<Double>> disk() {
        return Optional.ofNullable(this.disk);
    }

    /**
     * Maximum number of additional IPs
     * 
     */
    @Import(name="maximumAdditionnalIp")
    private @Nullable Output<Double> maximumAdditionnalIp;

    /**
     * @return Maximum number of additional IPs
     * 
     */
    public Optional<Output<Double>> maximumAdditionnalIp() {
        return Optional.ofNullable(this.maximumAdditionnalIp);
    }

    /**
     * RAM of the VPS
     * 
     */
    @Import(name="memory")
    private @Nullable Output<Double> memory;

    /**
     * @return RAM of the VPS
     * 
     */
    public Optional<Output<Double>> memory() {
        return Optional.ofNullable(this.memory);
    }

    /**
     * Name of the VPS
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the VPS
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Description of this VPS offer
     * 
     */
    @Import(name="offer")
    private @Nullable Output<String> offer;

    /**
     * @return Description of this VPS offer
     * 
     */
    public Optional<Output<String>> offer() {
        return Optional.ofNullable(this.offer);
    }

    /**
     * Number of vcores
     * 
     */
    @Import(name="vcore")
    private @Nullable Output<Double> vcore;

    /**
     * @return Number of vcores
     * 
     */
    public Optional<Output<Double>> vcore() {
        return Optional.ofNullable(this.vcore);
    }

    /**
     * All versions that VPS can have (2013v1┃2014v1┃2015v1┃2017v1┃2017v2┃2017v3┃2018v1┃2018v2┃2019v1)
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return All versions that VPS can have (2013v1┃2014v1┃2015v1┃2017v1┃2017v2┃2017v3┃2018v1┃2018v2┃2019v1)
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private VpsModelArgs() {}

    private VpsModelArgs(VpsModelArgs $) {
        this.availableOptions = $.availableOptions;
        this.datacenters = $.datacenters;
        this.disk = $.disk;
        this.maximumAdditionnalIp = $.maximumAdditionnalIp;
        this.memory = $.memory;
        this.name = $.name;
        this.offer = $.offer;
        this.vcore = $.vcore;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpsModelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpsModelArgs $;

        public Builder() {
            $ = new VpsModelArgs();
        }

        public Builder(VpsModelArgs defaults) {
            $ = new VpsModelArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param availableOptions All options the VPS can have (additionalDisk┃automatedBackup┃cpanel┃ftpbackup┃plesk┃snapshot┃veeam┃windows)
         * 
         * @return builder
         * 
         */
        public Builder availableOptions(@Nullable Output<List<String>> availableOptions) {
            $.availableOptions = availableOptions;
            return this;
        }

        /**
         * @param availableOptions All options the VPS can have (additionalDisk┃automatedBackup┃cpanel┃ftpbackup┃plesk┃snapshot┃veeam┃windows)
         * 
         * @return builder
         * 
         */
        public Builder availableOptions(List<String> availableOptions) {
            return availableOptions(Output.of(availableOptions));
        }

        /**
         * @param availableOptions All options the VPS can have (additionalDisk┃automatedBackup┃cpanel┃ftpbackup┃plesk┃snapshot┃veeam┃windows)
         * 
         * @return builder
         * 
         */
        public Builder availableOptions(String... availableOptions) {
            return availableOptions(List.of(availableOptions));
        }

        /**
         * @param datacenters Datacenters where this model is available
         * 
         * @return builder
         * 
         */
        public Builder datacenters(@Nullable Output<List<String>> datacenters) {
            $.datacenters = datacenters;
            return this;
        }

        /**
         * @param datacenters Datacenters where this model is available
         * 
         * @return builder
         * 
         */
        public Builder datacenters(List<String> datacenters) {
            return datacenters(Output.of(datacenters));
        }

        /**
         * @param datacenters Datacenters where this model is available
         * 
         * @return builder
         * 
         */
        public Builder datacenters(String... datacenters) {
            return datacenters(List.of(datacenters));
        }

        /**
         * @param disk Disk capacity of this VPS
         * 
         * @return builder
         * 
         */
        public Builder disk(@Nullable Output<Double> disk) {
            $.disk = disk;
            return this;
        }

        /**
         * @param disk Disk capacity of this VPS
         * 
         * @return builder
         * 
         */
        public Builder disk(Double disk) {
            return disk(Output.of(disk));
        }

        /**
         * @param maximumAdditionnalIp Maximum number of additional IPs
         * 
         * @return builder
         * 
         */
        public Builder maximumAdditionnalIp(@Nullable Output<Double> maximumAdditionnalIp) {
            $.maximumAdditionnalIp = maximumAdditionnalIp;
            return this;
        }

        /**
         * @param maximumAdditionnalIp Maximum number of additional IPs
         * 
         * @return builder
         * 
         */
        public Builder maximumAdditionnalIp(Double maximumAdditionnalIp) {
            return maximumAdditionnalIp(Output.of(maximumAdditionnalIp));
        }

        /**
         * @param memory RAM of the VPS
         * 
         * @return builder
         * 
         */
        public Builder memory(@Nullable Output<Double> memory) {
            $.memory = memory;
            return this;
        }

        /**
         * @param memory RAM of the VPS
         * 
         * @return builder
         * 
         */
        public Builder memory(Double memory) {
            return memory(Output.of(memory));
        }

        /**
         * @param name Name of the VPS
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the VPS
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param offer Description of this VPS offer
         * 
         * @return builder
         * 
         */
        public Builder offer(@Nullable Output<String> offer) {
            $.offer = offer;
            return this;
        }

        /**
         * @param offer Description of this VPS offer
         * 
         * @return builder
         * 
         */
        public Builder offer(String offer) {
            return offer(Output.of(offer));
        }

        /**
         * @param vcore Number of vcores
         * 
         * @return builder
         * 
         */
        public Builder vcore(@Nullable Output<Double> vcore) {
            $.vcore = vcore;
            return this;
        }

        /**
         * @param vcore Number of vcores
         * 
         * @return builder
         * 
         */
        public Builder vcore(Double vcore) {
            return vcore(Output.of(vcore));
        }

        /**
         * @param version All versions that VPS can have (2013v1┃2014v1┃2015v1┃2017v1┃2017v2┃2017v3┃2018v1┃2018v2┃2019v1)
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version All versions that VPS can have (2013v1┃2014v1┃2015v1┃2017v1┃2017v2┃2017v3┃2018v1┃2018v2┃2019v1)
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public VpsModelArgs build() {
            return $;
        }
    }

}
