// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.ovh.Ip.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FirewallRuleState extends com.pulumi.resources.ResourceArgs {

    public static final FirewallRuleState Empty = new FirewallRuleState();

    /**
     * Possible values for action (deny|permit)
     * 
     */
    @Import(name="action")
    private @Nullable Output<String> action;

    /**
     * @return Possible values for action (deny|permit)
     * 
     */
    public Optional<Output<String>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * Creation date of the rule
     * 
     */
    @Import(name="creationDate")
    private @Nullable Output<String> creationDate;

    /**
     * @return Creation date of the rule
     * 
     */
    public Optional<Output<String>> creationDate() {
        return Optional.ofNullable(this.creationDate);
    }

    /**
     * Destination IP for your rule
     * 
     */
    @Import(name="destination")
    private @Nullable Output<String> destination;

    /**
     * @return Destination IP for your rule
     * 
     */
    public Optional<Output<String>> destination() {
        return Optional.ofNullable(this.destination);
    }

    /**
     * Destination port for your rule. Only with TCP/UDP protocol
     * 
     */
    @Import(name="destinationPort")
    private @Nullable Output<Double> destinationPort;

    /**
     * @return Destination port for your rule. Only with TCP/UDP protocol
     * 
     */
    public Optional<Output<Double>> destinationPort() {
        return Optional.ofNullable(this.destinationPort);
    }

    /**
     * String description of field `destination_port`
     * 
     */
    @Import(name="destinationPortDesc")
    private @Nullable Output<String> destinationPortDesc;

    /**
     * @return String description of field `destination_port`
     * 
     */
    public Optional<Output<String>> destinationPortDesc() {
        return Optional.ofNullable(this.destinationPortDesc);
    }

    /**
     * Fragments option
     * 
     */
    @Import(name="fragments")
    private @Nullable Output<Boolean> fragments;

    /**
     * @return Fragments option
     * 
     */
    public Optional<Output<Boolean>> fragments() {
        return Optional.ofNullable(this.fragments);
    }

    /**
     * The IP or the CIDR
     * 
     */
    @Import(name="ip")
    private @Nullable Output<String> ip;

    /**
     * @return The IP or the CIDR
     * 
     */
    public Optional<Output<String>> ip() {
        return Optional.ofNullable(this.ip);
    }

    /**
     * IPv4 address
     * 
     */
    @Import(name="ipOnFirewall")
    private @Nullable Output<String> ipOnFirewall;

    /**
     * @return IPv4 address
     * 
     */
    public Optional<Output<String>> ipOnFirewall() {
        return Optional.ofNullable(this.ipOnFirewall);
    }

    /**
     * Possible values for protocol (ah|esp|gre|icmp|ipv4|tcp|udp)
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return Possible values for protocol (ah|esp|gre|icmp|ipv4|tcp|udp)
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * Description of the rule
     * 
     */
    @Import(name="rule")
    private @Nullable Output<String> rule;

    /**
     * @return Description of the rule
     * 
     */
    public Optional<Output<String>> rule() {
        return Optional.ofNullable(this.rule);
    }

    /**
     * Rule position in the rules array
     * 
     */
    @Import(name="sequence")
    private @Nullable Output<Double> sequence;

    /**
     * @return Rule position in the rules array
     * 
     */
    public Optional<Output<Double>> sequence() {
        return Optional.ofNullable(this.sequence);
    }

    /**
     * IPv4 CIDR notation (e.g., 192.0.2.0/24)
     * 
     */
    @Import(name="source")
    private @Nullable Output<String> source;

    /**
     * @return IPv4 CIDR notation (e.g., 192.0.2.0/24)
     * 
     */
    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * Source port for your rule. Only with TCP/UDP protocol
     * 
     */
    @Import(name="sourcePort")
    private @Nullable Output<Double> sourcePort;

    /**
     * @return Source port for your rule. Only with TCP/UDP protocol
     * 
     */
    public Optional<Output<Double>> sourcePort() {
        return Optional.ofNullable(this.sourcePort);
    }

    /**
     * String description of field `source_port`
     * 
     */
    @Import(name="sourcePortDesc")
    private @Nullable Output<String> sourcePortDesc;

    /**
     * @return String description of field `source_port`
     * 
     */
    public Optional<Output<String>> sourcePortDesc() {
        return Optional.ofNullable(this.sourcePortDesc);
    }

    /**
     * Current state of your rule
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Current state of your rule
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * TCP option on your rule (syn|established)
     * 
     */
    @Import(name="tcpOption")
    private @Nullable Output<String> tcpOption;

    /**
     * @return TCP option on your rule (syn|established)
     * 
     */
    public Optional<Output<String>> tcpOption() {
        return Optional.ofNullable(this.tcpOption);
    }

    private FirewallRuleState() {}

    private FirewallRuleState(FirewallRuleState $) {
        this.action = $.action;
        this.creationDate = $.creationDate;
        this.destination = $.destination;
        this.destinationPort = $.destinationPort;
        this.destinationPortDesc = $.destinationPortDesc;
        this.fragments = $.fragments;
        this.ip = $.ip;
        this.ipOnFirewall = $.ipOnFirewall;
        this.protocol = $.protocol;
        this.rule = $.rule;
        this.sequence = $.sequence;
        this.source = $.source;
        this.sourcePort = $.sourcePort;
        this.sourcePortDesc = $.sourcePortDesc;
        this.state = $.state;
        this.tcpOption = $.tcpOption;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FirewallRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FirewallRuleState $;

        public Builder() {
            $ = new FirewallRuleState();
        }

        public Builder(FirewallRuleState defaults) {
            $ = new FirewallRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param action Possible values for action (deny|permit)
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action Possible values for action (deny|permit)
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param creationDate Creation date of the rule
         * 
         * @return builder
         * 
         */
        public Builder creationDate(@Nullable Output<String> creationDate) {
            $.creationDate = creationDate;
            return this;
        }

        /**
         * @param creationDate Creation date of the rule
         * 
         * @return builder
         * 
         */
        public Builder creationDate(String creationDate) {
            return creationDate(Output.of(creationDate));
        }

        /**
         * @param destination Destination IP for your rule
         * 
         * @return builder
         * 
         */
        public Builder destination(@Nullable Output<String> destination) {
            $.destination = destination;
            return this;
        }

        /**
         * @param destination Destination IP for your rule
         * 
         * @return builder
         * 
         */
        public Builder destination(String destination) {
            return destination(Output.of(destination));
        }

        /**
         * @param destinationPort Destination port for your rule. Only with TCP/UDP protocol
         * 
         * @return builder
         * 
         */
        public Builder destinationPort(@Nullable Output<Double> destinationPort) {
            $.destinationPort = destinationPort;
            return this;
        }

        /**
         * @param destinationPort Destination port for your rule. Only with TCP/UDP protocol
         * 
         * @return builder
         * 
         */
        public Builder destinationPort(Double destinationPort) {
            return destinationPort(Output.of(destinationPort));
        }

        /**
         * @param destinationPortDesc String description of field `destination_port`
         * 
         * @return builder
         * 
         */
        public Builder destinationPortDesc(@Nullable Output<String> destinationPortDesc) {
            $.destinationPortDesc = destinationPortDesc;
            return this;
        }

        /**
         * @param destinationPortDesc String description of field `destination_port`
         * 
         * @return builder
         * 
         */
        public Builder destinationPortDesc(String destinationPortDesc) {
            return destinationPortDesc(Output.of(destinationPortDesc));
        }

        /**
         * @param fragments Fragments option
         * 
         * @return builder
         * 
         */
        public Builder fragments(@Nullable Output<Boolean> fragments) {
            $.fragments = fragments;
            return this;
        }

        /**
         * @param fragments Fragments option
         * 
         * @return builder
         * 
         */
        public Builder fragments(Boolean fragments) {
            return fragments(Output.of(fragments));
        }

        /**
         * @param ip The IP or the CIDR
         * 
         * @return builder
         * 
         */
        public Builder ip(@Nullable Output<String> ip) {
            $.ip = ip;
            return this;
        }

        /**
         * @param ip The IP or the CIDR
         * 
         * @return builder
         * 
         */
        public Builder ip(String ip) {
            return ip(Output.of(ip));
        }

        /**
         * @param ipOnFirewall IPv4 address
         * 
         * @return builder
         * 
         */
        public Builder ipOnFirewall(@Nullable Output<String> ipOnFirewall) {
            $.ipOnFirewall = ipOnFirewall;
            return this;
        }

        /**
         * @param ipOnFirewall IPv4 address
         * 
         * @return builder
         * 
         */
        public Builder ipOnFirewall(String ipOnFirewall) {
            return ipOnFirewall(Output.of(ipOnFirewall));
        }

        /**
         * @param protocol Possible values for protocol (ah|esp|gre|icmp|ipv4|tcp|udp)
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol Possible values for protocol (ah|esp|gre|icmp|ipv4|tcp|udp)
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param rule Description of the rule
         * 
         * @return builder
         * 
         */
        public Builder rule(@Nullable Output<String> rule) {
            $.rule = rule;
            return this;
        }

        /**
         * @param rule Description of the rule
         * 
         * @return builder
         * 
         */
        public Builder rule(String rule) {
            return rule(Output.of(rule));
        }

        /**
         * @param sequence Rule position in the rules array
         * 
         * @return builder
         * 
         */
        public Builder sequence(@Nullable Output<Double> sequence) {
            $.sequence = sequence;
            return this;
        }

        /**
         * @param sequence Rule position in the rules array
         * 
         * @return builder
         * 
         */
        public Builder sequence(Double sequence) {
            return sequence(Output.of(sequence));
        }

        /**
         * @param source IPv4 CIDR notation (e.g., 192.0.2.0/24)
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source IPv4 CIDR notation (e.g., 192.0.2.0/24)
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        /**
         * @param sourcePort Source port for your rule. Only with TCP/UDP protocol
         * 
         * @return builder
         * 
         */
        public Builder sourcePort(@Nullable Output<Double> sourcePort) {
            $.sourcePort = sourcePort;
            return this;
        }

        /**
         * @param sourcePort Source port for your rule. Only with TCP/UDP protocol
         * 
         * @return builder
         * 
         */
        public Builder sourcePort(Double sourcePort) {
            return sourcePort(Output.of(sourcePort));
        }

        /**
         * @param sourcePortDesc String description of field `source_port`
         * 
         * @return builder
         * 
         */
        public Builder sourcePortDesc(@Nullable Output<String> sourcePortDesc) {
            $.sourcePortDesc = sourcePortDesc;
            return this;
        }

        /**
         * @param sourcePortDesc String description of field `source_port`
         * 
         * @return builder
         * 
         */
        public Builder sourcePortDesc(String sourcePortDesc) {
            return sourcePortDesc(Output.of(sourcePortDesc));
        }

        /**
         * @param state Current state of your rule
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Current state of your rule
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param tcpOption TCP option on your rule (syn|established)
         * 
         * @return builder
         * 
         */
        public Builder tcpOption(@Nullable Output<String> tcpOption) {
            $.tcpOption = tcpOption;
            return this;
        }

        /**
         * @param tcpOption TCP option on your rule (syn|established)
         * 
         * @return builder
         * 
         */
        public Builder tcpOption(String tcpOption) {
            return tcpOption(Output.of(tcpOption));
        }

        public FirewallRuleState build() {
            return $;
        }
    }

}
