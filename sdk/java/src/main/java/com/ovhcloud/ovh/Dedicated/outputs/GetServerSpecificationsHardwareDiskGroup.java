// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.ovh.Dedicated.outputs;

import com.ovhcloud.ovh.Dedicated.outputs.GetServerSpecificationsHardwareDiskGroupDefaultHardwareRaidSize;
import com.ovhcloud.ovh.Dedicated.outputs.GetServerSpecificationsHardwareDiskGroupDiskSize;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetServerSpecificationsHardwareDiskGroup {
    /**
     * @return Default hardware raid size for this disk group
     * 
     */
    private GetServerSpecificationsHardwareDiskGroupDefaultHardwareRaidSize defaultHardwareRaidSize;
    /**
     * @return Default hardware raid type for this disk group
     * 
     */
    private String defaultHardwareRaidType;
    /**
     * @return Expansion card description
     * 
     */
    private String description;
    /**
     * @return Identifier of this disk group
     * 
     */
    private Double diskGroupId;
    /**
     * @return Disk capacity
     * 
     */
    private GetServerSpecificationsHardwareDiskGroupDiskSize diskSize;
    /**
     * @return Type of the disk (SSD, SATA, SAS, ...)
     * 
     */
    private String diskType;
    /**
     * @return Number of disks in this group
     * 
     */
    private Double numberOfDisks;
    /**
     * @return Raid controller, if any, managing this group of disks
     * 
     */
    private String raidController;

    private GetServerSpecificationsHardwareDiskGroup() {}
    /**
     * @return Default hardware raid size for this disk group
     * 
     */
    public GetServerSpecificationsHardwareDiskGroupDefaultHardwareRaidSize defaultHardwareRaidSize() {
        return this.defaultHardwareRaidSize;
    }
    /**
     * @return Default hardware raid type for this disk group
     * 
     */
    public String defaultHardwareRaidType() {
        return this.defaultHardwareRaidType;
    }
    /**
     * @return Expansion card description
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Identifier of this disk group
     * 
     */
    public Double diskGroupId() {
        return this.diskGroupId;
    }
    /**
     * @return Disk capacity
     * 
     */
    public GetServerSpecificationsHardwareDiskGroupDiskSize diskSize() {
        return this.diskSize;
    }
    /**
     * @return Type of the disk (SSD, SATA, SAS, ...)
     * 
     */
    public String diskType() {
        return this.diskType;
    }
    /**
     * @return Number of disks in this group
     * 
     */
    public Double numberOfDisks() {
        return this.numberOfDisks;
    }
    /**
     * @return Raid controller, if any, managing this group of disks
     * 
     */
    public String raidController() {
        return this.raidController;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServerSpecificationsHardwareDiskGroup defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetServerSpecificationsHardwareDiskGroupDefaultHardwareRaidSize defaultHardwareRaidSize;
        private String defaultHardwareRaidType;
        private String description;
        private Double diskGroupId;
        private GetServerSpecificationsHardwareDiskGroupDiskSize diskSize;
        private String diskType;
        private Double numberOfDisks;
        private String raidController;
        public Builder() {}
        public Builder(GetServerSpecificationsHardwareDiskGroup defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultHardwareRaidSize = defaults.defaultHardwareRaidSize;
    	      this.defaultHardwareRaidType = defaults.defaultHardwareRaidType;
    	      this.description = defaults.description;
    	      this.diskGroupId = defaults.diskGroupId;
    	      this.diskSize = defaults.diskSize;
    	      this.diskType = defaults.diskType;
    	      this.numberOfDisks = defaults.numberOfDisks;
    	      this.raidController = defaults.raidController;
        }

        @CustomType.Setter
        public Builder defaultHardwareRaidSize(GetServerSpecificationsHardwareDiskGroupDefaultHardwareRaidSize defaultHardwareRaidSize) {
            if (defaultHardwareRaidSize == null) {
              throw new MissingRequiredPropertyException("GetServerSpecificationsHardwareDiskGroup", "defaultHardwareRaidSize");
            }
            this.defaultHardwareRaidSize = defaultHardwareRaidSize;
            return this;
        }
        @CustomType.Setter
        public Builder defaultHardwareRaidType(String defaultHardwareRaidType) {
            if (defaultHardwareRaidType == null) {
              throw new MissingRequiredPropertyException("GetServerSpecificationsHardwareDiskGroup", "defaultHardwareRaidType");
            }
            this.defaultHardwareRaidType = defaultHardwareRaidType;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetServerSpecificationsHardwareDiskGroup", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder diskGroupId(Double diskGroupId) {
            if (diskGroupId == null) {
              throw new MissingRequiredPropertyException("GetServerSpecificationsHardwareDiskGroup", "diskGroupId");
            }
            this.diskGroupId = diskGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder diskSize(GetServerSpecificationsHardwareDiskGroupDiskSize diskSize) {
            if (diskSize == null) {
              throw new MissingRequiredPropertyException("GetServerSpecificationsHardwareDiskGroup", "diskSize");
            }
            this.diskSize = diskSize;
            return this;
        }
        @CustomType.Setter
        public Builder diskType(String diskType) {
            if (diskType == null) {
              throw new MissingRequiredPropertyException("GetServerSpecificationsHardwareDiskGroup", "diskType");
            }
            this.diskType = diskType;
            return this;
        }
        @CustomType.Setter
        public Builder numberOfDisks(Double numberOfDisks) {
            if (numberOfDisks == null) {
              throw new MissingRequiredPropertyException("GetServerSpecificationsHardwareDiskGroup", "numberOfDisks");
            }
            this.numberOfDisks = numberOfDisks;
            return this;
        }
        @CustomType.Setter
        public Builder raidController(String raidController) {
            if (raidController == null) {
              throw new MissingRequiredPropertyException("GetServerSpecificationsHardwareDiskGroup", "raidController");
            }
            this.raidController = raidController;
            return this;
        }
        public GetServerSpecificationsHardwareDiskGroup build() {
            final var _resultValue = new GetServerSpecificationsHardwareDiskGroup();
            _resultValue.defaultHardwareRaidSize = defaultHardwareRaidSize;
            _resultValue.defaultHardwareRaidType = defaultHardwareRaidType;
            _resultValue.description = description;
            _resultValue.diskGroupId = diskGroupId;
            _resultValue.diskSize = diskSize;
            _resultValue.diskType = diskType;
            _resultValue.numberOfDisks = numberOfDisks;
            _resultValue.raidController = raidController;
            return _resultValue;
        }
    }
}
