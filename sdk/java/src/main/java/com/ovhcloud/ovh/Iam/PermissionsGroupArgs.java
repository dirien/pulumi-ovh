// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.ovh.Iam;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PermissionsGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final PermissionsGroupArgs Empty = new PermissionsGroupArgs();

    /**
     * Set of actions allowed by the permissions group.
     * 
     */
    @Import(name="allows")
    private @Nullable Output<List<String>> allows;

    /**
     * @return Set of actions allowed by the permissions group.
     * 
     */
    public Optional<Output<List<String>>> allows() {
        return Optional.ofNullable(this.allows);
    }

    /**
     * Set of actions that will be denied no matter what permissions group exists.
     * 
     */
    @Import(name="denies")
    private @Nullable Output<List<String>> denies;

    /**
     * @return Set of actions that will be denied no matter what permissions group exists.
     * 
     */
    public Optional<Output<List<String>>> denies() {
        return Optional.ofNullable(this.denies);
    }

    /**
     * Group description.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return Group description.
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * Set of actions that will be subtracted from the `allow` list.
     * 
     */
    @Import(name="excepts")
    private @Nullable Output<List<String>> excepts;

    /**
     * @return Set of actions that will be subtracted from the `allow` list.
     * 
     */
    public Optional<Output<List<String>>> excepts() {
        return Optional.ofNullable(this.excepts);
    }

    /**
     * Name of the permissions group.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the permissions group.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Date of the last update of this group.
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    /**
     * @return Date of the last update of this group.
     * 
     */
    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    private PermissionsGroupArgs() {}

    private PermissionsGroupArgs(PermissionsGroupArgs $) {
        this.allows = $.allows;
        this.denies = $.denies;
        this.description = $.description;
        this.excepts = $.excepts;
        this.name = $.name;
        this.updatedAt = $.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PermissionsGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PermissionsGroupArgs $;

        public Builder() {
            $ = new PermissionsGroupArgs();
        }

        public Builder(PermissionsGroupArgs defaults) {
            $ = new PermissionsGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allows Set of actions allowed by the permissions group.
         * 
         * @return builder
         * 
         */
        public Builder allows(@Nullable Output<List<String>> allows) {
            $.allows = allows;
            return this;
        }

        /**
         * @param allows Set of actions allowed by the permissions group.
         * 
         * @return builder
         * 
         */
        public Builder allows(List<String> allows) {
            return allows(Output.of(allows));
        }

        /**
         * @param allows Set of actions allowed by the permissions group.
         * 
         * @return builder
         * 
         */
        public Builder allows(String... allows) {
            return allows(List.of(allows));
        }

        /**
         * @param denies Set of actions that will be denied no matter what permissions group exists.
         * 
         * @return builder
         * 
         */
        public Builder denies(@Nullable Output<List<String>> denies) {
            $.denies = denies;
            return this;
        }

        /**
         * @param denies Set of actions that will be denied no matter what permissions group exists.
         * 
         * @return builder
         * 
         */
        public Builder denies(List<String> denies) {
            return denies(Output.of(denies));
        }

        /**
         * @param denies Set of actions that will be denied no matter what permissions group exists.
         * 
         * @return builder
         * 
         */
        public Builder denies(String... denies) {
            return denies(List.of(denies));
        }

        /**
         * @param description Group description.
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Group description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param excepts Set of actions that will be subtracted from the `allow` list.
         * 
         * @return builder
         * 
         */
        public Builder excepts(@Nullable Output<List<String>> excepts) {
            $.excepts = excepts;
            return this;
        }

        /**
         * @param excepts Set of actions that will be subtracted from the `allow` list.
         * 
         * @return builder
         * 
         */
        public Builder excepts(List<String> excepts) {
            return excepts(Output.of(excepts));
        }

        /**
         * @param excepts Set of actions that will be subtracted from the `allow` list.
         * 
         * @return builder
         * 
         */
        public Builder excepts(String... excepts) {
            return excepts(List.of(excepts));
        }

        /**
         * @param name Name of the permissions group.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the permissions group.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param updatedAt Date of the last update of this group.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt Date of the last update of this group.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        public PermissionsGroupArgs build() {
            if ($.description == null) {
                throw new MissingRequiredPropertyException("PermissionsGroupArgs", "description");
            }
            return $;
        }
    }

}
