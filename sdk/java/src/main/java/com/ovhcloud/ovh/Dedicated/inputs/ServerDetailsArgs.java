// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.ovh.Dedicated.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerDetailsArgs Empty = new ServerDetailsArgs();

    /**
     * Personnal hostname to use in server reinstallation
     * 
     */
    @Import(name="customHostname")
    private @Nullable Output<String> customHostname;

    /**
     * @return Personnal hostname to use in server reinstallation
     * 
     */
    public Optional<Output<String>> customHostname() {
        return Optional.ofNullable(this.customHostname);
    }

    /**
     * Disk group id to process install on (only available for some templates)
     * 
     */
    @Import(name="diskGroupId")
    private @Nullable Output<Double> diskGroupId;

    /**
     * @return Disk group id to process install on (only available for some templates)
     * 
     */
    public Optional<Output<Double>> diskGroupId() {
        return Optional.ofNullable(this.diskGroupId);
    }

    /**
     * true if you want to install only on the first disk
     * 
     */
    @Import(name="noRaid")
    private @Nullable Output<Boolean> noRaid;

    /**
     * @return true if you want to install only on the first disk
     * 
     */
    public Optional<Output<Boolean>> noRaid() {
        return Optional.ofNullable(this.noRaid);
    }

    /**
     * Number of devices to use for system&#39;s software RAID
     * 
     */
    @Import(name="softRaidDevices")
    private @Nullable Output<Double> softRaidDevices;

    /**
     * @return Number of devices to use for system&#39;s software RAID
     * 
     */
    public Optional<Output<Double>> softRaidDevices() {
        return Optional.ofNullable(this.softRaidDevices);
    }

    private ServerDetailsArgs() {}

    private ServerDetailsArgs(ServerDetailsArgs $) {
        this.customHostname = $.customHostname;
        this.diskGroupId = $.diskGroupId;
        this.noRaid = $.noRaid;
        this.softRaidDevices = $.softRaidDevices;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerDetailsArgs $;

        public Builder() {
            $ = new ServerDetailsArgs();
        }

        public Builder(ServerDetailsArgs defaults) {
            $ = new ServerDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param customHostname Personnal hostname to use in server reinstallation
         * 
         * @return builder
         * 
         */
        public Builder customHostname(@Nullable Output<String> customHostname) {
            $.customHostname = customHostname;
            return this;
        }

        /**
         * @param customHostname Personnal hostname to use in server reinstallation
         * 
         * @return builder
         * 
         */
        public Builder customHostname(String customHostname) {
            return customHostname(Output.of(customHostname));
        }

        /**
         * @param diskGroupId Disk group id to process install on (only available for some templates)
         * 
         * @return builder
         * 
         */
        public Builder diskGroupId(@Nullable Output<Double> diskGroupId) {
            $.diskGroupId = diskGroupId;
            return this;
        }

        /**
         * @param diskGroupId Disk group id to process install on (only available for some templates)
         * 
         * @return builder
         * 
         */
        public Builder diskGroupId(Double diskGroupId) {
            return diskGroupId(Output.of(diskGroupId));
        }

        /**
         * @param noRaid true if you want to install only on the first disk
         * 
         * @return builder
         * 
         */
        public Builder noRaid(@Nullable Output<Boolean> noRaid) {
            $.noRaid = noRaid;
            return this;
        }

        /**
         * @param noRaid true if you want to install only on the first disk
         * 
         * @return builder
         * 
         */
        public Builder noRaid(Boolean noRaid) {
            return noRaid(Output.of(noRaid));
        }

        /**
         * @param softRaidDevices Number of devices to use for system&#39;s software RAID
         * 
         * @return builder
         * 
         */
        public Builder softRaidDevices(@Nullable Output<Double> softRaidDevices) {
            $.softRaidDevices = softRaidDevices;
            return this;
        }

        /**
         * @param softRaidDevices Number of devices to use for system&#39;s software RAID
         * 
         * @return builder
         * 
         */
        public Builder softRaidDevices(Double softRaidDevices) {
            return softRaidDevices(Output.of(softRaidDevices));
        }

        public ServerDetailsArgs build() {
            return $;
        }
    }

}
