// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.ovh.Ip;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MitigationArgs extends com.pulumi.resources.ResourceArgs {

    public static final MitigationArgs Empty = new MitigationArgs();

    /**
     * The IP or the CIDR
     * 
     */
    @Import(name="ip", required=true)
    private Output<String> ip;

    /**
     * @return The IP or the CIDR
     * 
     */
    public Output<String> ip() {
        return this.ip;
    }

    /**
     * IPv4 address
     * * ` permanent  ` - Set on true if the IP is on permanent mitigation
     * 
     */
    @Import(name="ipOnMitigation", required=true)
    private Output<String> ipOnMitigation;

    /**
     * @return IPv4 address
     * * ` permanent  ` - Set on true if the IP is on permanent mitigation
     * 
     */
    public Output<String> ipOnMitigation() {
        return this.ipOnMitigation;
    }

    /**
     * Set on true if your ip is on permanent mitigation
     * 
     */
    @Import(name="permanent")
    private @Nullable Output<Boolean> permanent;

    /**
     * @return Set on true if your ip is on permanent mitigation
     * 
     */
    public Optional<Output<Boolean>> permanent() {
        return Optional.ofNullable(this.permanent);
    }

    private MitigationArgs() {}

    private MitigationArgs(MitigationArgs $) {
        this.ip = $.ip;
        this.ipOnMitigation = $.ipOnMitigation;
        this.permanent = $.permanent;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MitigationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MitigationArgs $;

        public Builder() {
            $ = new MitigationArgs();
        }

        public Builder(MitigationArgs defaults) {
            $ = new MitigationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ip The IP or the CIDR
         * 
         * @return builder
         * 
         */
        public Builder ip(Output<String> ip) {
            $.ip = ip;
            return this;
        }

        /**
         * @param ip The IP or the CIDR
         * 
         * @return builder
         * 
         */
        public Builder ip(String ip) {
            return ip(Output.of(ip));
        }

        /**
         * @param ipOnMitigation IPv4 address
         * * ` permanent  ` - Set on true if the IP is on permanent mitigation
         * 
         * @return builder
         * 
         */
        public Builder ipOnMitigation(Output<String> ipOnMitigation) {
            $.ipOnMitigation = ipOnMitigation;
            return this;
        }

        /**
         * @param ipOnMitigation IPv4 address
         * * ` permanent  ` - Set on true if the IP is on permanent mitigation
         * 
         * @return builder
         * 
         */
        public Builder ipOnMitigation(String ipOnMitigation) {
            return ipOnMitigation(Output.of(ipOnMitigation));
        }

        /**
         * @param permanent Set on true if your ip is on permanent mitigation
         * 
         * @return builder
         * 
         */
        public Builder permanent(@Nullable Output<Boolean> permanent) {
            $.permanent = permanent;
            return this;
        }

        /**
         * @param permanent Set on true if your ip is on permanent mitigation
         * 
         * @return builder
         * 
         */
        public Builder permanent(Boolean permanent) {
            return permanent(Output.of(permanent));
        }

        public MitigationArgs build() {
            if ($.ip == null) {
                throw new MissingRequiredPropertyException("MitigationArgs", "ip");
            }
            if ($.ipOnMitigation == null) {
                throw new MissingRequiredPropertyException("MitigationArgs", "ipOnMitigation");
            }
            return $;
        }
    }

}
