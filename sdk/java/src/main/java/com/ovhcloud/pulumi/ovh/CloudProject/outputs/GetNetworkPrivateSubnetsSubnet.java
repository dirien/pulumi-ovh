// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.CloudProject.outputs;

import com.ovhcloud.pulumi.ovh.CloudProject.outputs.GetNetworkPrivateSubnetsSubnetIpPool;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetNetworkPrivateSubnetsSubnet {
    /**
     * @return CIDR of the subnet
     * 
     */
    private String cidr;
    /**
     * @return Whether or not if DHCP is enabled for the subnet
     * 
     */
    private Boolean dhcpEnabled;
    /**
     * @return Gateway IP of the subnet
     * 
     */
    private String gatewayIp;
    /**
     * @return ID of the subnet
     * 
     */
    private String id;
    /**
     * @return List of ip pools allocated in the subnet
     * 
     */
    private List<GetNetworkPrivateSubnetsSubnetIpPool> ipPools;

    private GetNetworkPrivateSubnetsSubnet() {}
    /**
     * @return CIDR of the subnet
     * 
     */
    public String cidr() {
        return this.cidr;
    }
    /**
     * @return Whether or not if DHCP is enabled for the subnet
     * 
     */
    public Boolean dhcpEnabled() {
        return this.dhcpEnabled;
    }
    /**
     * @return Gateway IP of the subnet
     * 
     */
    public String gatewayIp() {
        return this.gatewayIp;
    }
    /**
     * @return ID of the subnet
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return List of ip pools allocated in the subnet
     * 
     */
    public List<GetNetworkPrivateSubnetsSubnetIpPool> ipPools() {
        return this.ipPools;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworkPrivateSubnetsSubnet defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String cidr;
        private Boolean dhcpEnabled;
        private String gatewayIp;
        private String id;
        private List<GetNetworkPrivateSubnetsSubnetIpPool> ipPools;
        public Builder() {}
        public Builder(GetNetworkPrivateSubnetsSubnet defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cidr = defaults.cidr;
    	      this.dhcpEnabled = defaults.dhcpEnabled;
    	      this.gatewayIp = defaults.gatewayIp;
    	      this.id = defaults.id;
    	      this.ipPools = defaults.ipPools;
        }

        @CustomType.Setter
        public Builder cidr(String cidr) {
            if (cidr == null) {
              throw new MissingRequiredPropertyException("GetNetworkPrivateSubnetsSubnet", "cidr");
            }
            this.cidr = cidr;
            return this;
        }
        @CustomType.Setter
        public Builder dhcpEnabled(Boolean dhcpEnabled) {
            if (dhcpEnabled == null) {
              throw new MissingRequiredPropertyException("GetNetworkPrivateSubnetsSubnet", "dhcpEnabled");
            }
            this.dhcpEnabled = dhcpEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder gatewayIp(String gatewayIp) {
            if (gatewayIp == null) {
              throw new MissingRequiredPropertyException("GetNetworkPrivateSubnetsSubnet", "gatewayIp");
            }
            this.gatewayIp = gatewayIp;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNetworkPrivateSubnetsSubnet", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipPools(List<GetNetworkPrivateSubnetsSubnetIpPool> ipPools) {
            if (ipPools == null) {
              throw new MissingRequiredPropertyException("GetNetworkPrivateSubnetsSubnet", "ipPools");
            }
            this.ipPools = ipPools;
            return this;
        }
        public Builder ipPools(GetNetworkPrivateSubnetsSubnetIpPool... ipPools) {
            return ipPools(List.of(ipPools));
        }
        public GetNetworkPrivateSubnetsSubnet build() {
            final var _resultValue = new GetNetworkPrivateSubnetsSubnet();
            _resultValue.cidr = cidr;
            _resultValue.dhcpEnabled = dhcpEnabled;
            _resultValue.gatewayIp = gatewayIp;
            _resultValue.id = id;
            _resultValue.ipPools = ipPools;
            return _resultValue;
        }
    }
}
