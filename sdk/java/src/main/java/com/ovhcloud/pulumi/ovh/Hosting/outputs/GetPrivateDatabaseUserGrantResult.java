// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.Hosting.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetPrivateDatabaseUserGrantResult {
    /**
     * @return Creation date of the database
     * 
     */
    private String creationDate;
    private String databaseName;
    /**
     * @return Grant name
     * 
     */
    private String grant;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String serviceName;
    private String userName;

    private GetPrivateDatabaseUserGrantResult() {}
    /**
     * @return Creation date of the database
     * 
     */
    public String creationDate() {
        return this.creationDate;
    }
    public String databaseName() {
        return this.databaseName;
    }
    /**
     * @return Grant name
     * 
     */
    public String grant() {
        return this.grant;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String serviceName() {
        return this.serviceName;
    }
    public String userName() {
        return this.userName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPrivateDatabaseUserGrantResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String creationDate;
        private String databaseName;
        private String grant;
        private String id;
        private String serviceName;
        private String userName;
        public Builder() {}
        public Builder(GetPrivateDatabaseUserGrantResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.creationDate = defaults.creationDate;
    	      this.databaseName = defaults.databaseName;
    	      this.grant = defaults.grant;
    	      this.id = defaults.id;
    	      this.serviceName = defaults.serviceName;
    	      this.userName = defaults.userName;
        }

        @CustomType.Setter
        public Builder creationDate(String creationDate) {
            if (creationDate == null) {
              throw new MissingRequiredPropertyException("GetPrivateDatabaseUserGrantResult", "creationDate");
            }
            this.creationDate = creationDate;
            return this;
        }
        @CustomType.Setter
        public Builder databaseName(String databaseName) {
            if (databaseName == null) {
              throw new MissingRequiredPropertyException("GetPrivateDatabaseUserGrantResult", "databaseName");
            }
            this.databaseName = databaseName;
            return this;
        }
        @CustomType.Setter
        public Builder grant(String grant) {
            if (grant == null) {
              throw new MissingRequiredPropertyException("GetPrivateDatabaseUserGrantResult", "grant");
            }
            this.grant = grant;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetPrivateDatabaseUserGrantResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder serviceName(String serviceName) {
            if (serviceName == null) {
              throw new MissingRequiredPropertyException("GetPrivateDatabaseUserGrantResult", "serviceName");
            }
            this.serviceName = serviceName;
            return this;
        }
        @CustomType.Setter
        public Builder userName(String userName) {
            if (userName == null) {
              throw new MissingRequiredPropertyException("GetPrivateDatabaseUserGrantResult", "userName");
            }
            this.userName = userName;
            return this;
        }
        public GetPrivateDatabaseUserGrantResult build() {
            final var _resultValue = new GetPrivateDatabaseUserGrantResult();
            _resultValue.creationDate = creationDate;
            _resultValue.databaseName = databaseName;
            _resultValue.grant = grant;
            _resultValue.id = id;
            _resultValue.serviceName = serviceName;
            _resultValue.userName = userName;
            return _resultValue;
        }
    }
}
