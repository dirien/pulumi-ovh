// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.CloudProject.inputs;

import com.ovhcloud.pulumi.ovh.CloudProject.inputs.RegionNetworkSubnetAllocationPoolArgs;
import com.ovhcloud.pulumi.ovh.CloudProject.inputs.RegionNetworkSubnetHostRouteArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegionNetworkSubnetArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegionNetworkSubnetArgs Empty = new RegionNetworkSubnetArgs();

    /**
     * List of IP pools allocated in subnet
     * 
     */
    @Import(name="allocationPools")
    private @Nullable Output<List<RegionNetworkSubnetAllocationPoolArgs>> allocationPools;

    /**
     * @return List of IP pools allocated in subnet
     * 
     */
    public Optional<Output<List<RegionNetworkSubnetAllocationPoolArgs>>> allocationPools() {
        return Optional.ofNullable(this.allocationPools);
    }

    /**
     * Subnet range in CIDR notation
     * 
     */
    @Import(name="cidr", required=true)
    private Output<String> cidr;

    /**
     * @return Subnet range in CIDR notation
     * 
     */
    public Output<String> cidr() {
        return this.cidr;
    }

    /**
     * DNS nameservers
     * 
     */
    @Import(name="dnsNameServers")
    private @Nullable Output<List<String>> dnsNameServers;

    /**
     * @return DNS nameservers
     * 
     */
    public Optional<Output<List<String>>> dnsNameServers() {
        return Optional.ofNullable(this.dnsNameServers);
    }

    /**
     * Enable DHCP for the subnet
     * 
     */
    @Import(name="enableDhcp", required=true)
    private Output<Boolean> enableDhcp;

    /**
     * @return Enable DHCP for the subnet
     * 
     */
    public Output<Boolean> enableDhcp() {
        return this.enableDhcp;
    }

    /**
     * Set a gateway ip for the subnet
     * 
     */
    @Import(name="enableGatewayIp", required=true)
    private Output<Boolean> enableGatewayIp;

    /**
     * @return Set a gateway ip for the subnet
     * 
     */
    public Output<Boolean> enableGatewayIp() {
        return this.enableGatewayIp;
    }

    /**
     * Gateway IP
     * 
     */
    @Import(name="gatewayIp")
    private @Nullable Output<String> gatewayIp;

    /**
     * @return Gateway IP
     * 
     */
    public Optional<Output<String>> gatewayIp() {
        return Optional.ofNullable(this.gatewayIp);
    }

    /**
     * Host routes
     * 
     */
    @Import(name="hostRoutes")
    private @Nullable Output<List<RegionNetworkSubnetHostRouteArgs>> hostRoutes;

    /**
     * @return Host routes
     * 
     */
    public Optional<Output<List<RegionNetworkSubnetHostRouteArgs>>> hostRoutes() {
        return Optional.ofNullable(this.hostRoutes);
    }

    /**
     * IP version
     * 
     */
    @Import(name="ipVersion", required=true)
    private Output<Double> ipVersion;

    /**
     * @return IP version
     * 
     */
    public Output<Double> ipVersion() {
        return this.ipVersion;
    }

    /**
     * Subnet name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Subnet name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Use default DNS
     * 
     */
    @Import(name="useDefaultPublicDnsresolver")
    private @Nullable Output<Boolean> useDefaultPublicDnsresolver;

    /**
     * @return Use default DNS
     * 
     */
    public Optional<Output<Boolean>> useDefaultPublicDnsresolver() {
        return Optional.ofNullable(this.useDefaultPublicDnsresolver);
    }

    private RegionNetworkSubnetArgs() {}

    private RegionNetworkSubnetArgs(RegionNetworkSubnetArgs $) {
        this.allocationPools = $.allocationPools;
        this.cidr = $.cidr;
        this.dnsNameServers = $.dnsNameServers;
        this.enableDhcp = $.enableDhcp;
        this.enableGatewayIp = $.enableGatewayIp;
        this.gatewayIp = $.gatewayIp;
        this.hostRoutes = $.hostRoutes;
        this.ipVersion = $.ipVersion;
        this.name = $.name;
        this.useDefaultPublicDnsresolver = $.useDefaultPublicDnsresolver;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegionNetworkSubnetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegionNetworkSubnetArgs $;

        public Builder() {
            $ = new RegionNetworkSubnetArgs();
        }

        public Builder(RegionNetworkSubnetArgs defaults) {
            $ = new RegionNetworkSubnetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allocationPools List of IP pools allocated in subnet
         * 
         * @return builder
         * 
         */
        public Builder allocationPools(@Nullable Output<List<RegionNetworkSubnetAllocationPoolArgs>> allocationPools) {
            $.allocationPools = allocationPools;
            return this;
        }

        /**
         * @param allocationPools List of IP pools allocated in subnet
         * 
         * @return builder
         * 
         */
        public Builder allocationPools(List<RegionNetworkSubnetAllocationPoolArgs> allocationPools) {
            return allocationPools(Output.of(allocationPools));
        }

        /**
         * @param allocationPools List of IP pools allocated in subnet
         * 
         * @return builder
         * 
         */
        public Builder allocationPools(RegionNetworkSubnetAllocationPoolArgs... allocationPools) {
            return allocationPools(List.of(allocationPools));
        }

        /**
         * @param cidr Subnet range in CIDR notation
         * 
         * @return builder
         * 
         */
        public Builder cidr(Output<String> cidr) {
            $.cidr = cidr;
            return this;
        }

        /**
         * @param cidr Subnet range in CIDR notation
         * 
         * @return builder
         * 
         */
        public Builder cidr(String cidr) {
            return cidr(Output.of(cidr));
        }

        /**
         * @param dnsNameServers DNS nameservers
         * 
         * @return builder
         * 
         */
        public Builder dnsNameServers(@Nullable Output<List<String>> dnsNameServers) {
            $.dnsNameServers = dnsNameServers;
            return this;
        }

        /**
         * @param dnsNameServers DNS nameservers
         * 
         * @return builder
         * 
         */
        public Builder dnsNameServers(List<String> dnsNameServers) {
            return dnsNameServers(Output.of(dnsNameServers));
        }

        /**
         * @param dnsNameServers DNS nameservers
         * 
         * @return builder
         * 
         */
        public Builder dnsNameServers(String... dnsNameServers) {
            return dnsNameServers(List.of(dnsNameServers));
        }

        /**
         * @param enableDhcp Enable DHCP for the subnet
         * 
         * @return builder
         * 
         */
        public Builder enableDhcp(Output<Boolean> enableDhcp) {
            $.enableDhcp = enableDhcp;
            return this;
        }

        /**
         * @param enableDhcp Enable DHCP for the subnet
         * 
         * @return builder
         * 
         */
        public Builder enableDhcp(Boolean enableDhcp) {
            return enableDhcp(Output.of(enableDhcp));
        }

        /**
         * @param enableGatewayIp Set a gateway ip for the subnet
         * 
         * @return builder
         * 
         */
        public Builder enableGatewayIp(Output<Boolean> enableGatewayIp) {
            $.enableGatewayIp = enableGatewayIp;
            return this;
        }

        /**
         * @param enableGatewayIp Set a gateway ip for the subnet
         * 
         * @return builder
         * 
         */
        public Builder enableGatewayIp(Boolean enableGatewayIp) {
            return enableGatewayIp(Output.of(enableGatewayIp));
        }

        /**
         * @param gatewayIp Gateway IP
         * 
         * @return builder
         * 
         */
        public Builder gatewayIp(@Nullable Output<String> gatewayIp) {
            $.gatewayIp = gatewayIp;
            return this;
        }

        /**
         * @param gatewayIp Gateway IP
         * 
         * @return builder
         * 
         */
        public Builder gatewayIp(String gatewayIp) {
            return gatewayIp(Output.of(gatewayIp));
        }

        /**
         * @param hostRoutes Host routes
         * 
         * @return builder
         * 
         */
        public Builder hostRoutes(@Nullable Output<List<RegionNetworkSubnetHostRouteArgs>> hostRoutes) {
            $.hostRoutes = hostRoutes;
            return this;
        }

        /**
         * @param hostRoutes Host routes
         * 
         * @return builder
         * 
         */
        public Builder hostRoutes(List<RegionNetworkSubnetHostRouteArgs> hostRoutes) {
            return hostRoutes(Output.of(hostRoutes));
        }

        /**
         * @param hostRoutes Host routes
         * 
         * @return builder
         * 
         */
        public Builder hostRoutes(RegionNetworkSubnetHostRouteArgs... hostRoutes) {
            return hostRoutes(List.of(hostRoutes));
        }

        /**
         * @param ipVersion IP version
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(Output<Double> ipVersion) {
            $.ipVersion = ipVersion;
            return this;
        }

        /**
         * @param ipVersion IP version
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(Double ipVersion) {
            return ipVersion(Output.of(ipVersion));
        }

        /**
         * @param name Subnet name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Subnet name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param useDefaultPublicDnsresolver Use default DNS
         * 
         * @return builder
         * 
         */
        public Builder useDefaultPublicDnsresolver(@Nullable Output<Boolean> useDefaultPublicDnsresolver) {
            $.useDefaultPublicDnsresolver = useDefaultPublicDnsresolver;
            return this;
        }

        /**
         * @param useDefaultPublicDnsresolver Use default DNS
         * 
         * @return builder
         * 
         */
        public Builder useDefaultPublicDnsresolver(Boolean useDefaultPublicDnsresolver) {
            return useDefaultPublicDnsresolver(Output.of(useDefaultPublicDnsresolver));
        }

        public RegionNetworkSubnetArgs build() {
            if ($.cidr == null) {
                throw new MissingRequiredPropertyException("RegionNetworkSubnetArgs", "cidr");
            }
            if ($.enableDhcp == null) {
                throw new MissingRequiredPropertyException("RegionNetworkSubnetArgs", "enableDhcp");
            }
            if ($.enableGatewayIp == null) {
                throw new MissingRequiredPropertyException("RegionNetworkSubnetArgs", "enableGatewayIp");
            }
            if ($.ipVersion == null) {
                throw new MissingRequiredPropertyException("RegionNetworkSubnetArgs", "ipVersion");
            }
            return $;
        }
    }

}
