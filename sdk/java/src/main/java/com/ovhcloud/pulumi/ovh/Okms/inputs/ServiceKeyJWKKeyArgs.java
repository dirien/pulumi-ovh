// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.Okms.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceKeyJWKKeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceKeyJWKKeyArgs Empty = new ServiceKeyJWKKeyArgs();

    /**
     * The algorithm intended to be used with the key
     * 
     */
    @Import(name="alg")
    private @Nullable Output<String> alg;

    /**
     * @return The algorithm intended to be used with the key
     * 
     */
    public Optional<Output<String>> alg() {
        return Optional.ofNullable(this.alg);
    }

    /**
     * The cryptographic curve used with the key
     * 
     */
    @Import(name="crv")
    private @Nullable Output<String> crv;

    /**
     * @return The cryptographic curve used with the key
     * 
     */
    public Optional<Output<String>> crv() {
        return Optional.ofNullable(this.crv);
    }

    /**
     * The RSA or EC private exponent
     * 
     */
    @Import(name="d")
    private @Nullable Output<String> d;

    /**
     * @return The RSA or EC private exponent
     * 
     */
    public Optional<Output<String>> d() {
        return Optional.ofNullable(this.d);
    }

    /**
     * The RSA private key&#39;s first factor CRT exponent
     * 
     */
    @Import(name="dp")
    private @Nullable Output<String> dp;

    /**
     * @return The RSA private key&#39;s first factor CRT exponent
     * 
     */
    public Optional<Output<String>> dp() {
        return Optional.ofNullable(this.dp);
    }

    /**
     * The RSA private key&#39;s second factor CRT exponent
     * 
     */
    @Import(name="dq")
    private @Nullable Output<String> dq;

    /**
     * @return The RSA private key&#39;s second factor CRT exponent
     * 
     */
    public Optional<Output<String>> dq() {
        return Optional.ofNullable(this.dq);
    }

    /**
     * The exponent value for the RSA public key
     * 
     */
    @Import(name="e")
    private @Nullable Output<String> e;

    /**
     * @return The exponent value for the RSA public key
     * 
     */
    public Optional<Output<String>> e() {
        return Optional.ofNullable(this.e);
    }

    /**
     * The value of the symmetric (or other single-valued) key
     * 
     */
    @Import(name="k")
    private @Nullable Output<String> k;

    /**
     * @return The value of the symmetric (or other single-valued) key
     * 
     */
    public Optional<Output<String>> k() {
        return Optional.ofNullable(this.k);
    }

    /**
     * The operation for which the key is intended to be used
     * 
     */
    @Import(name="keyOps", required=true)
    private Output<List<String>> keyOps;

    /**
     * @return The operation for which the key is intended to be used
     * 
     */
    public Output<List<String>> keyOps() {
        return this.keyOps;
    }

    /**
     * key ID parameter used to match a specific key
     * 
     */
    @Import(name="kid")
    private @Nullable Output<String> kid;

    /**
     * @return key ID parameter used to match a specific key
     * 
     */
    public Optional<Output<String>> kid() {
        return Optional.ofNullable(this.kid);
    }

    /**
     * Key type parameter identifies the cryptographic algorithm family used with the key, such as RSA or EC
     * 
     */
    @Import(name="kty", required=true)
    private Output<String> kty;

    /**
     * @return Key type parameter identifies the cryptographic algorithm family used with the key, such as RSA or EC
     * 
     */
    public Output<String> kty() {
        return this.kty;
    }

    /**
     * The modulus value for the RSA public key
     * 
     */
    @Import(name="n")
    private @Nullable Output<String> n;

    /**
     * @return The modulus value for the RSA public key
     * 
     */
    public Optional<Output<String>> n() {
        return Optional.ofNullable(this.n);
    }

    /**
     * The first prime factor of the RSA private key
     * 
     */
    @Import(name="p")
    private @Nullable Output<String> p;

    /**
     * @return The first prime factor of the RSA private key
     * 
     */
    public Optional<Output<String>> p() {
        return Optional.ofNullable(this.p);
    }

    /**
     * The second prime factor of the RSA private key
     * 
     */
    @Import(name="q")
    private @Nullable Output<String> q;

    /**
     * @return The second prime factor of the RSA private key
     * 
     */
    public Optional<Output<String>> q() {
        return Optional.ofNullable(this.q);
    }

    /**
     * The CRT coefficient of the second factor of the RSA private key
     * 
     */
    @Import(name="qi")
    private @Nullable Output<String> qi;

    /**
     * @return The CRT coefficient of the second factor of the RSA private key
     * 
     */
    public Optional<Output<String>> qi() {
        return Optional.ofNullable(this.qi);
    }

    /**
     * The intended use of the public key
     * 
     */
    @Import(name="use")
    private @Nullable Output<String> use;

    /**
     * @return The intended use of the public key
     * 
     */
    public Optional<Output<String>> use() {
        return Optional.ofNullable(this.use);
    }

    /**
     * The x coordinate for the Elliptic Curve point
     * 
     */
    @Import(name="x")
    private @Nullable Output<String> x;

    /**
     * @return The x coordinate for the Elliptic Curve point
     * 
     */
    public Optional<Output<String>> x() {
        return Optional.ofNullable(this.x);
    }

    /**
     * The y coordinate for the Elliptic Curve point
     * 
     */
    @Import(name="y")
    private @Nullable Output<String> y;

    /**
     * @return The y coordinate for the Elliptic Curve point
     * 
     */
    public Optional<Output<String>> y() {
        return Optional.ofNullable(this.y);
    }

    private ServiceKeyJWKKeyArgs() {}

    private ServiceKeyJWKKeyArgs(ServiceKeyJWKKeyArgs $) {
        this.alg = $.alg;
        this.crv = $.crv;
        this.d = $.d;
        this.dp = $.dp;
        this.dq = $.dq;
        this.e = $.e;
        this.k = $.k;
        this.keyOps = $.keyOps;
        this.kid = $.kid;
        this.kty = $.kty;
        this.n = $.n;
        this.p = $.p;
        this.q = $.q;
        this.qi = $.qi;
        this.use = $.use;
        this.x = $.x;
        this.y = $.y;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceKeyJWKKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceKeyJWKKeyArgs $;

        public Builder() {
            $ = new ServiceKeyJWKKeyArgs();
        }

        public Builder(ServiceKeyJWKKeyArgs defaults) {
            $ = new ServiceKeyJWKKeyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alg The algorithm intended to be used with the key
         * 
         * @return builder
         * 
         */
        public Builder alg(@Nullable Output<String> alg) {
            $.alg = alg;
            return this;
        }

        /**
         * @param alg The algorithm intended to be used with the key
         * 
         * @return builder
         * 
         */
        public Builder alg(String alg) {
            return alg(Output.of(alg));
        }

        /**
         * @param crv The cryptographic curve used with the key
         * 
         * @return builder
         * 
         */
        public Builder crv(@Nullable Output<String> crv) {
            $.crv = crv;
            return this;
        }

        /**
         * @param crv The cryptographic curve used with the key
         * 
         * @return builder
         * 
         */
        public Builder crv(String crv) {
            return crv(Output.of(crv));
        }

        /**
         * @param d The RSA or EC private exponent
         * 
         * @return builder
         * 
         */
        public Builder d(@Nullable Output<String> d) {
            $.d = d;
            return this;
        }

        /**
         * @param d The RSA or EC private exponent
         * 
         * @return builder
         * 
         */
        public Builder d(String d) {
            return d(Output.of(d));
        }

        /**
         * @param dp The RSA private key&#39;s first factor CRT exponent
         * 
         * @return builder
         * 
         */
        public Builder dp(@Nullable Output<String> dp) {
            $.dp = dp;
            return this;
        }

        /**
         * @param dp The RSA private key&#39;s first factor CRT exponent
         * 
         * @return builder
         * 
         */
        public Builder dp(String dp) {
            return dp(Output.of(dp));
        }

        /**
         * @param dq The RSA private key&#39;s second factor CRT exponent
         * 
         * @return builder
         * 
         */
        public Builder dq(@Nullable Output<String> dq) {
            $.dq = dq;
            return this;
        }

        /**
         * @param dq The RSA private key&#39;s second factor CRT exponent
         * 
         * @return builder
         * 
         */
        public Builder dq(String dq) {
            return dq(Output.of(dq));
        }

        /**
         * @param e The exponent value for the RSA public key
         * 
         * @return builder
         * 
         */
        public Builder e(@Nullable Output<String> e) {
            $.e = e;
            return this;
        }

        /**
         * @param e The exponent value for the RSA public key
         * 
         * @return builder
         * 
         */
        public Builder e(String e) {
            return e(Output.of(e));
        }

        /**
         * @param k The value of the symmetric (or other single-valued) key
         * 
         * @return builder
         * 
         */
        public Builder k(@Nullable Output<String> k) {
            $.k = k;
            return this;
        }

        /**
         * @param k The value of the symmetric (or other single-valued) key
         * 
         * @return builder
         * 
         */
        public Builder k(String k) {
            return k(Output.of(k));
        }

        /**
         * @param keyOps The operation for which the key is intended to be used
         * 
         * @return builder
         * 
         */
        public Builder keyOps(Output<List<String>> keyOps) {
            $.keyOps = keyOps;
            return this;
        }

        /**
         * @param keyOps The operation for which the key is intended to be used
         * 
         * @return builder
         * 
         */
        public Builder keyOps(List<String> keyOps) {
            return keyOps(Output.of(keyOps));
        }

        /**
         * @param keyOps The operation for which the key is intended to be used
         * 
         * @return builder
         * 
         */
        public Builder keyOps(String... keyOps) {
            return keyOps(List.of(keyOps));
        }

        /**
         * @param kid key ID parameter used to match a specific key
         * 
         * @return builder
         * 
         */
        public Builder kid(@Nullable Output<String> kid) {
            $.kid = kid;
            return this;
        }

        /**
         * @param kid key ID parameter used to match a specific key
         * 
         * @return builder
         * 
         */
        public Builder kid(String kid) {
            return kid(Output.of(kid));
        }

        /**
         * @param kty Key type parameter identifies the cryptographic algorithm family used with the key, such as RSA or EC
         * 
         * @return builder
         * 
         */
        public Builder kty(Output<String> kty) {
            $.kty = kty;
            return this;
        }

        /**
         * @param kty Key type parameter identifies the cryptographic algorithm family used with the key, such as RSA or EC
         * 
         * @return builder
         * 
         */
        public Builder kty(String kty) {
            return kty(Output.of(kty));
        }

        /**
         * @param n The modulus value for the RSA public key
         * 
         * @return builder
         * 
         */
        public Builder n(@Nullable Output<String> n) {
            $.n = n;
            return this;
        }

        /**
         * @param n The modulus value for the RSA public key
         * 
         * @return builder
         * 
         */
        public Builder n(String n) {
            return n(Output.of(n));
        }

        /**
         * @param p The first prime factor of the RSA private key
         * 
         * @return builder
         * 
         */
        public Builder p(@Nullable Output<String> p) {
            $.p = p;
            return this;
        }

        /**
         * @param p The first prime factor of the RSA private key
         * 
         * @return builder
         * 
         */
        public Builder p(String p) {
            return p(Output.of(p));
        }

        /**
         * @param q The second prime factor of the RSA private key
         * 
         * @return builder
         * 
         */
        public Builder q(@Nullable Output<String> q) {
            $.q = q;
            return this;
        }

        /**
         * @param q The second prime factor of the RSA private key
         * 
         * @return builder
         * 
         */
        public Builder q(String q) {
            return q(Output.of(q));
        }

        /**
         * @param qi The CRT coefficient of the second factor of the RSA private key
         * 
         * @return builder
         * 
         */
        public Builder qi(@Nullable Output<String> qi) {
            $.qi = qi;
            return this;
        }

        /**
         * @param qi The CRT coefficient of the second factor of the RSA private key
         * 
         * @return builder
         * 
         */
        public Builder qi(String qi) {
            return qi(Output.of(qi));
        }

        /**
         * @param use The intended use of the public key
         * 
         * @return builder
         * 
         */
        public Builder use(@Nullable Output<String> use) {
            $.use = use;
            return this;
        }

        /**
         * @param use The intended use of the public key
         * 
         * @return builder
         * 
         */
        public Builder use(String use) {
            return use(Output.of(use));
        }

        /**
         * @param x The x coordinate for the Elliptic Curve point
         * 
         * @return builder
         * 
         */
        public Builder x(@Nullable Output<String> x) {
            $.x = x;
            return this;
        }

        /**
         * @param x The x coordinate for the Elliptic Curve point
         * 
         * @return builder
         * 
         */
        public Builder x(String x) {
            return x(Output.of(x));
        }

        /**
         * @param y The y coordinate for the Elliptic Curve point
         * 
         * @return builder
         * 
         */
        public Builder y(@Nullable Output<String> y) {
            $.y = y;
            return this;
        }

        /**
         * @param y The y coordinate for the Elliptic Curve point
         * 
         * @return builder
         * 
         */
        public Builder y(String y) {
            return y(Output.of(y));
        }

        public ServiceKeyJWKKeyArgs build() {
            if ($.keyOps == null) {
                throw new MissingRequiredPropertyException("ServiceKeyJWKKeyArgs", "keyOps");
            }
            if ($.kty == null) {
                throw new MissingRequiredPropertyException("ServiceKeyJWKKeyArgs", "kty");
            }
            return $;
        }
    }

}
