// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.Ip.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetFirewallRuleResult {
    /**
     * @return Possible values for action (deny|permit)
     * 
     */
    private String action;
    /**
     * @return Creation date of the rule
     * 
     */
    private String creationDate;
    /**
     * @return Destination IP for your rule
     * 
     */
    private String destination;
    /**
     * @return Destination port for your rule. Only with TCP/UDP protocol
     * 
     */
    private String destinationPort;
    /**
     * @return Fragments option
     * 
     */
    private Boolean fragments;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The IP or the CIDR
     * 
     */
    private String ip;
    /**
     * @return IPv4 address
     * 
     */
    private String ipOnFirewall;
    /**
     * @return Possible values for protocol (ah|esp|gre|icmp|ipv4|tcp|udp)
     * 
     */
    private String protocol;
    /**
     * @return Description of the rule
     * 
     */
    private String rule;
    /**
     * @return Rule position in the rules array
     * 
     */
    private Double sequence;
    /**
     * @return IPv4 CIDR notation (e.g., 192.0.2.0/24)
     * 
     */
    private String source;
    /**
     * @return Source port for your rule. Only with TCP/UDP protocol
     * 
     */
    private String sourcePort;
    /**
     * @return Current state of your rule
     * 
     */
    private String state;
    /**
     * @return TCP option on your rule (syn|established)
     * 
     */
    private String tcpOption;

    private GetFirewallRuleResult() {}
    /**
     * @return Possible values for action (deny|permit)
     * 
     */
    public String action() {
        return this.action;
    }
    /**
     * @return Creation date of the rule
     * 
     */
    public String creationDate() {
        return this.creationDate;
    }
    /**
     * @return Destination IP for your rule
     * 
     */
    public String destination() {
        return this.destination;
    }
    /**
     * @return Destination port for your rule. Only with TCP/UDP protocol
     * 
     */
    public String destinationPort() {
        return this.destinationPort;
    }
    /**
     * @return Fragments option
     * 
     */
    public Boolean fragments() {
        return this.fragments;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The IP or the CIDR
     * 
     */
    public String ip() {
        return this.ip;
    }
    /**
     * @return IPv4 address
     * 
     */
    public String ipOnFirewall() {
        return this.ipOnFirewall;
    }
    /**
     * @return Possible values for protocol (ah|esp|gre|icmp|ipv4|tcp|udp)
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return Description of the rule
     * 
     */
    public String rule() {
        return this.rule;
    }
    /**
     * @return Rule position in the rules array
     * 
     */
    public Double sequence() {
        return this.sequence;
    }
    /**
     * @return IPv4 CIDR notation (e.g., 192.0.2.0/24)
     * 
     */
    public String source() {
        return this.source;
    }
    /**
     * @return Source port for your rule. Only with TCP/UDP protocol
     * 
     */
    public String sourcePort() {
        return this.sourcePort;
    }
    /**
     * @return Current state of your rule
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return TCP option on your rule (syn|established)
     * 
     */
    public String tcpOption() {
        return this.tcpOption;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFirewallRuleResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String action;
        private String creationDate;
        private String destination;
        private String destinationPort;
        private Boolean fragments;
        private String id;
        private String ip;
        private String ipOnFirewall;
        private String protocol;
        private String rule;
        private Double sequence;
        private String source;
        private String sourcePort;
        private String state;
        private String tcpOption;
        public Builder() {}
        public Builder(GetFirewallRuleResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.creationDate = defaults.creationDate;
    	      this.destination = defaults.destination;
    	      this.destinationPort = defaults.destinationPort;
    	      this.fragments = defaults.fragments;
    	      this.id = defaults.id;
    	      this.ip = defaults.ip;
    	      this.ipOnFirewall = defaults.ipOnFirewall;
    	      this.protocol = defaults.protocol;
    	      this.rule = defaults.rule;
    	      this.sequence = defaults.sequence;
    	      this.source = defaults.source;
    	      this.sourcePort = defaults.sourcePort;
    	      this.state = defaults.state;
    	      this.tcpOption = defaults.tcpOption;
        }

        @CustomType.Setter
        public Builder action(String action) {
            if (action == null) {
              throw new MissingRequiredPropertyException("GetFirewallRuleResult", "action");
            }
            this.action = action;
            return this;
        }
        @CustomType.Setter
        public Builder creationDate(String creationDate) {
            if (creationDate == null) {
              throw new MissingRequiredPropertyException("GetFirewallRuleResult", "creationDate");
            }
            this.creationDate = creationDate;
            return this;
        }
        @CustomType.Setter
        public Builder destination(String destination) {
            if (destination == null) {
              throw new MissingRequiredPropertyException("GetFirewallRuleResult", "destination");
            }
            this.destination = destination;
            return this;
        }
        @CustomType.Setter
        public Builder destinationPort(String destinationPort) {
            if (destinationPort == null) {
              throw new MissingRequiredPropertyException("GetFirewallRuleResult", "destinationPort");
            }
            this.destinationPort = destinationPort;
            return this;
        }
        @CustomType.Setter
        public Builder fragments(Boolean fragments) {
            if (fragments == null) {
              throw new MissingRequiredPropertyException("GetFirewallRuleResult", "fragments");
            }
            this.fragments = fragments;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetFirewallRuleResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ip(String ip) {
            if (ip == null) {
              throw new MissingRequiredPropertyException("GetFirewallRuleResult", "ip");
            }
            this.ip = ip;
            return this;
        }
        @CustomType.Setter
        public Builder ipOnFirewall(String ipOnFirewall) {
            if (ipOnFirewall == null) {
              throw new MissingRequiredPropertyException("GetFirewallRuleResult", "ipOnFirewall");
            }
            this.ipOnFirewall = ipOnFirewall;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetFirewallRuleResult", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder rule(String rule) {
            if (rule == null) {
              throw new MissingRequiredPropertyException("GetFirewallRuleResult", "rule");
            }
            this.rule = rule;
            return this;
        }
        @CustomType.Setter
        public Builder sequence(Double sequence) {
            if (sequence == null) {
              throw new MissingRequiredPropertyException("GetFirewallRuleResult", "sequence");
            }
            this.sequence = sequence;
            return this;
        }
        @CustomType.Setter
        public Builder source(String source) {
            if (source == null) {
              throw new MissingRequiredPropertyException("GetFirewallRuleResult", "source");
            }
            this.source = source;
            return this;
        }
        @CustomType.Setter
        public Builder sourcePort(String sourcePort) {
            if (sourcePort == null) {
              throw new MissingRequiredPropertyException("GetFirewallRuleResult", "sourcePort");
            }
            this.sourcePort = sourcePort;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetFirewallRuleResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder tcpOption(String tcpOption) {
            if (tcpOption == null) {
              throw new MissingRequiredPropertyException("GetFirewallRuleResult", "tcpOption");
            }
            this.tcpOption = tcpOption;
            return this;
        }
        public GetFirewallRuleResult build() {
            final var _resultValue = new GetFirewallRuleResult();
            _resultValue.action = action;
            _resultValue.creationDate = creationDate;
            _resultValue.destination = destination;
            _resultValue.destinationPort = destinationPort;
            _resultValue.fragments = fragments;
            _resultValue.id = id;
            _resultValue.ip = ip;
            _resultValue.ipOnFirewall = ipOnFirewall;
            _resultValue.protocol = protocol;
            _resultValue.rule = rule;
            _resultValue.sequence = sequence;
            _resultValue.source = source;
            _resultValue.sourcePort = sourcePort;
            _resultValue.state = state;
            _resultValue.tcpOption = tcpOption;
            return _resultValue;
        }
    }
}
