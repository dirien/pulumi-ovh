// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.Hosting.outputs;

import com.ovhcloud.pulumi.ovh.Hosting.outputs.GetPrivateDatabaseDbUser;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetPrivateDatabaseDbResult {
    /**
     * @return Time of the next backup (every day)
     * 
     */
    private String backupTime;
    /**
     * @return Creation date of the database
     * 
     */
    private String creationDate;
    private String databaseName;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Space used by the database (in MB)
     * 
     */
    private Integer quotaUsed;
    private String serviceName;
    /**
     * @return Users granted to this database
     * 
     */
    private List<GetPrivateDatabaseDbUser> users;

    private GetPrivateDatabaseDbResult() {}
    /**
     * @return Time of the next backup (every day)
     * 
     */
    public String backupTime() {
        return this.backupTime;
    }
    /**
     * @return Creation date of the database
     * 
     */
    public String creationDate() {
        return this.creationDate;
    }
    public String databaseName() {
        return this.databaseName;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Space used by the database (in MB)
     * 
     */
    public Integer quotaUsed() {
        return this.quotaUsed;
    }
    public String serviceName() {
        return this.serviceName;
    }
    /**
     * @return Users granted to this database
     * 
     */
    public List<GetPrivateDatabaseDbUser> users() {
        return this.users;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPrivateDatabaseDbResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String backupTime;
        private String creationDate;
        private String databaseName;
        private String id;
        private Integer quotaUsed;
        private String serviceName;
        private List<GetPrivateDatabaseDbUser> users;
        public Builder() {}
        public Builder(GetPrivateDatabaseDbResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupTime = defaults.backupTime;
    	      this.creationDate = defaults.creationDate;
    	      this.databaseName = defaults.databaseName;
    	      this.id = defaults.id;
    	      this.quotaUsed = defaults.quotaUsed;
    	      this.serviceName = defaults.serviceName;
    	      this.users = defaults.users;
        }

        @CustomType.Setter
        public Builder backupTime(String backupTime) {
            if (backupTime == null) {
              throw new MissingRequiredPropertyException("GetPrivateDatabaseDbResult", "backupTime");
            }
            this.backupTime = backupTime;
            return this;
        }
        @CustomType.Setter
        public Builder creationDate(String creationDate) {
            if (creationDate == null) {
              throw new MissingRequiredPropertyException("GetPrivateDatabaseDbResult", "creationDate");
            }
            this.creationDate = creationDate;
            return this;
        }
        @CustomType.Setter
        public Builder databaseName(String databaseName) {
            if (databaseName == null) {
              throw new MissingRequiredPropertyException("GetPrivateDatabaseDbResult", "databaseName");
            }
            this.databaseName = databaseName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetPrivateDatabaseDbResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder quotaUsed(Integer quotaUsed) {
            if (quotaUsed == null) {
              throw new MissingRequiredPropertyException("GetPrivateDatabaseDbResult", "quotaUsed");
            }
            this.quotaUsed = quotaUsed;
            return this;
        }
        @CustomType.Setter
        public Builder serviceName(String serviceName) {
            if (serviceName == null) {
              throw new MissingRequiredPropertyException("GetPrivateDatabaseDbResult", "serviceName");
            }
            this.serviceName = serviceName;
            return this;
        }
        @CustomType.Setter
        public Builder users(List<GetPrivateDatabaseDbUser> users) {
            if (users == null) {
              throw new MissingRequiredPropertyException("GetPrivateDatabaseDbResult", "users");
            }
            this.users = users;
            return this;
        }
        public Builder users(GetPrivateDatabaseDbUser... users) {
            return users(List.of(users));
        }
        public GetPrivateDatabaseDbResult build() {
            final var _resultValue = new GetPrivateDatabaseDbResult();
            _resultValue.backupTime = backupTime;
            _resultValue.creationDate = creationDate;
            _resultValue.databaseName = databaseName;
            _resultValue.id = id;
            _resultValue.quotaUsed = quotaUsed;
            _resultValue.serviceName = serviceName;
            _resultValue.users = users;
            return _resultValue;
        }
    }
}
