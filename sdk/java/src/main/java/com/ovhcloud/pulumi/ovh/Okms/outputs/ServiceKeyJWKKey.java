// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.Okms.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServiceKeyJWKKey {
    /**
     * @return The algorithm intended to be used with the key
     * 
     */
    private @Nullable String alg;
    /**
     * @return The cryptographic curve used with the key
     * 
     */
    private @Nullable String crv;
    /**
     * @return The RSA or EC private exponent
     * 
     */
    private @Nullable String d;
    /**
     * @return The RSA private key&#39;s first factor CRT exponent
     * 
     */
    private @Nullable String dp;
    /**
     * @return The RSA private key&#39;s second factor CRT exponent
     * 
     */
    private @Nullable String dq;
    /**
     * @return The exponent value for the RSA public key
     * 
     */
    private @Nullable String e;
    /**
     * @return The value of the symmetric (or other single-valued) key
     * 
     */
    private @Nullable String k;
    /**
     * @return The operation for which the key is intended to be used
     * 
     */
    private List<String> keyOps;
    /**
     * @return key ID parameter used to match a specific key
     * 
     */
    private @Nullable String kid;
    /**
     * @return Key type parameter identifies the cryptographic algorithm family used with the key, such as RSA or EC
     * 
     */
    private String kty;
    /**
     * @return The modulus value for the RSA public key
     * 
     */
    private @Nullable String n;
    /**
     * @return The first prime factor of the RSA private key
     * 
     */
    private @Nullable String p;
    /**
     * @return The second prime factor of the RSA private key
     * 
     */
    private @Nullable String q;
    /**
     * @return The CRT coefficient of the second factor of the RSA private key
     * 
     */
    private @Nullable String qi;
    /**
     * @return The intended use of the public key
     * 
     */
    private @Nullable String use;
    /**
     * @return The x coordinate for the Elliptic Curve point
     * 
     */
    private @Nullable String x;
    /**
     * @return The y coordinate for the Elliptic Curve point
     * 
     */
    private @Nullable String y;

    private ServiceKeyJWKKey() {}
    /**
     * @return The algorithm intended to be used with the key
     * 
     */
    public Optional<String> alg() {
        return Optional.ofNullable(this.alg);
    }
    /**
     * @return The cryptographic curve used with the key
     * 
     */
    public Optional<String> crv() {
        return Optional.ofNullable(this.crv);
    }
    /**
     * @return The RSA or EC private exponent
     * 
     */
    public Optional<String> d() {
        return Optional.ofNullable(this.d);
    }
    /**
     * @return The RSA private key&#39;s first factor CRT exponent
     * 
     */
    public Optional<String> dp() {
        return Optional.ofNullable(this.dp);
    }
    /**
     * @return The RSA private key&#39;s second factor CRT exponent
     * 
     */
    public Optional<String> dq() {
        return Optional.ofNullable(this.dq);
    }
    /**
     * @return The exponent value for the RSA public key
     * 
     */
    public Optional<String> e() {
        return Optional.ofNullable(this.e);
    }
    /**
     * @return The value of the symmetric (or other single-valued) key
     * 
     */
    public Optional<String> k() {
        return Optional.ofNullable(this.k);
    }
    /**
     * @return The operation for which the key is intended to be used
     * 
     */
    public List<String> keyOps() {
        return this.keyOps;
    }
    /**
     * @return key ID parameter used to match a specific key
     * 
     */
    public Optional<String> kid() {
        return Optional.ofNullable(this.kid);
    }
    /**
     * @return Key type parameter identifies the cryptographic algorithm family used with the key, such as RSA or EC
     * 
     */
    public String kty() {
        return this.kty;
    }
    /**
     * @return The modulus value for the RSA public key
     * 
     */
    public Optional<String> n() {
        return Optional.ofNullable(this.n);
    }
    /**
     * @return The first prime factor of the RSA private key
     * 
     */
    public Optional<String> p() {
        return Optional.ofNullable(this.p);
    }
    /**
     * @return The second prime factor of the RSA private key
     * 
     */
    public Optional<String> q() {
        return Optional.ofNullable(this.q);
    }
    /**
     * @return The CRT coefficient of the second factor of the RSA private key
     * 
     */
    public Optional<String> qi() {
        return Optional.ofNullable(this.qi);
    }
    /**
     * @return The intended use of the public key
     * 
     */
    public Optional<String> use() {
        return Optional.ofNullable(this.use);
    }
    /**
     * @return The x coordinate for the Elliptic Curve point
     * 
     */
    public Optional<String> x() {
        return Optional.ofNullable(this.x);
    }
    /**
     * @return The y coordinate for the Elliptic Curve point
     * 
     */
    public Optional<String> y() {
        return Optional.ofNullable(this.y);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceKeyJWKKey defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String alg;
        private @Nullable String crv;
        private @Nullable String d;
        private @Nullable String dp;
        private @Nullable String dq;
        private @Nullable String e;
        private @Nullable String k;
        private List<String> keyOps;
        private @Nullable String kid;
        private String kty;
        private @Nullable String n;
        private @Nullable String p;
        private @Nullable String q;
        private @Nullable String qi;
        private @Nullable String use;
        private @Nullable String x;
        private @Nullable String y;
        public Builder() {}
        public Builder(ServiceKeyJWKKey defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alg = defaults.alg;
    	      this.crv = defaults.crv;
    	      this.d = defaults.d;
    	      this.dp = defaults.dp;
    	      this.dq = defaults.dq;
    	      this.e = defaults.e;
    	      this.k = defaults.k;
    	      this.keyOps = defaults.keyOps;
    	      this.kid = defaults.kid;
    	      this.kty = defaults.kty;
    	      this.n = defaults.n;
    	      this.p = defaults.p;
    	      this.q = defaults.q;
    	      this.qi = defaults.qi;
    	      this.use = defaults.use;
    	      this.x = defaults.x;
    	      this.y = defaults.y;
        }

        @CustomType.Setter
        public Builder alg(@Nullable String alg) {

            this.alg = alg;
            return this;
        }
        @CustomType.Setter
        public Builder crv(@Nullable String crv) {

            this.crv = crv;
            return this;
        }
        @CustomType.Setter
        public Builder d(@Nullable String d) {

            this.d = d;
            return this;
        }
        @CustomType.Setter
        public Builder dp(@Nullable String dp) {

            this.dp = dp;
            return this;
        }
        @CustomType.Setter
        public Builder dq(@Nullable String dq) {

            this.dq = dq;
            return this;
        }
        @CustomType.Setter
        public Builder e(@Nullable String e) {

            this.e = e;
            return this;
        }
        @CustomType.Setter
        public Builder k(@Nullable String k) {

            this.k = k;
            return this;
        }
        @CustomType.Setter
        public Builder keyOps(List<String> keyOps) {
            if (keyOps == null) {
              throw new MissingRequiredPropertyException("ServiceKeyJWKKey", "keyOps");
            }
            this.keyOps = keyOps;
            return this;
        }
        public Builder keyOps(String... keyOps) {
            return keyOps(List.of(keyOps));
        }
        @CustomType.Setter
        public Builder kid(@Nullable String kid) {

            this.kid = kid;
            return this;
        }
        @CustomType.Setter
        public Builder kty(String kty) {
            if (kty == null) {
              throw new MissingRequiredPropertyException("ServiceKeyJWKKey", "kty");
            }
            this.kty = kty;
            return this;
        }
        @CustomType.Setter
        public Builder n(@Nullable String n) {

            this.n = n;
            return this;
        }
        @CustomType.Setter
        public Builder p(@Nullable String p) {

            this.p = p;
            return this;
        }
        @CustomType.Setter
        public Builder q(@Nullable String q) {

            this.q = q;
            return this;
        }
        @CustomType.Setter
        public Builder qi(@Nullable String qi) {

            this.qi = qi;
            return this;
        }
        @CustomType.Setter
        public Builder use(@Nullable String use) {

            this.use = use;
            return this;
        }
        @CustomType.Setter
        public Builder x(@Nullable String x) {

            this.x = x;
            return this;
        }
        @CustomType.Setter
        public Builder y(@Nullable String y) {

            this.y = y;
            return this;
        }
        public ServiceKeyJWKKey build() {
            final var _resultValue = new ServiceKeyJWKKey();
            _resultValue.alg = alg;
            _resultValue.crv = crv;
            _resultValue.d = d;
            _resultValue.dp = dp;
            _resultValue.dq = dq;
            _resultValue.e = e;
            _resultValue.k = k;
            _resultValue.keyOps = keyOps;
            _resultValue.kid = kid;
            _resultValue.kty = kty;
            _resultValue.n = n;
            _resultValue.p = p;
            _resultValue.q = q;
            _resultValue.qi = qi;
            _resultValue.use = use;
            _resultValue.x = x;
            _resultValue.y = y;
            return _resultValue;
        }
    }
}
