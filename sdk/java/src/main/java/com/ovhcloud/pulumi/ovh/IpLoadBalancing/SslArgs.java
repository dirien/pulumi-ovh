// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.IpLoadBalancing;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SslArgs extends com.pulumi.resources.ResourceArgs {

    public static final SslArgs Empty = new SslArgs();

    /**
     * Certificate
     * 
     */
    @Import(name="certificate", required=true)
    private Output<String> certificate;

    /**
     * @return Certificate
     * 
     */
    public Output<String> certificate() {
        return this.certificate;
    }

    /**
     * Certificate chain
     * 
     */
    @Import(name="chain")
    private @Nullable Output<String> chain;

    /**
     * @return Certificate chain
     * 
     */
    public Optional<Output<String>> chain() {
        return Optional.ofNullable(this.chain);
    }

    /**
     * Readable label for loadbalancer ssl
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Readable label for loadbalancer ssl
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Certificate key
     * 
     */
    @Import(name="key", required=true)
    private Output<String> key;

    /**
     * @return Certificate key
     * 
     */
    public Output<String> key() {
        return this.key;
    }

    /**
     * The internal name of your IP load balancing
     * 
     */
    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    /**
     * @return The internal name of your IP load balancing
     * 
     */
    public Output<String> serviceName() {
        return this.serviceName;
    }

    private SslArgs() {}

    private SslArgs(SslArgs $) {
        this.certificate = $.certificate;
        this.chain = $.chain;
        this.displayName = $.displayName;
        this.key = $.key;
        this.serviceName = $.serviceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SslArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SslArgs $;

        public Builder() {
            $ = new SslArgs();
        }

        public Builder(SslArgs defaults) {
            $ = new SslArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificate Certificate
         * 
         * @return builder
         * 
         */
        public Builder certificate(Output<String> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate Certificate
         * 
         * @return builder
         * 
         */
        public Builder certificate(String certificate) {
            return certificate(Output.of(certificate));
        }

        /**
         * @param chain Certificate chain
         * 
         * @return builder
         * 
         */
        public Builder chain(@Nullable Output<String> chain) {
            $.chain = chain;
            return this;
        }

        /**
         * @param chain Certificate chain
         * 
         * @return builder
         * 
         */
        public Builder chain(String chain) {
            return chain(Output.of(chain));
        }

        /**
         * @param displayName Readable label for loadbalancer ssl
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Readable label for loadbalancer ssl
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param key Certificate key
         * 
         * @return builder
         * 
         */
        public Builder key(Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key Certificate key
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param serviceName The internal name of your IP load balancing
         * 
         * @return builder
         * 
         */
        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The internal name of your IP load balancing
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        public SslArgs build() {
            if ($.certificate == null) {
                throw new MissingRequiredPropertyException("SslArgs", "certificate");
            }
            if ($.key == null) {
                throw new MissingRequiredPropertyException("SslArgs", "key");
            }
            if ($.serviceName == null) {
                throw new MissingRequiredPropertyException("SslArgs", "serviceName");
            }
            return $;
        }
    }

}
