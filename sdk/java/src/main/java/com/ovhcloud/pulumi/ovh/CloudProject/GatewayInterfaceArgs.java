// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.CloudProject;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GatewayInterfaceArgs extends com.pulumi.resources.ResourceArgs {

    public static final GatewayInterfaceArgs Empty = new GatewayInterfaceArgs();

    /**
     * ID of the interface
     * 
     */
    @Import(name="interfaceId")
    private @Nullable Output<String> interfaceId;

    /**
     * @return ID of the interface
     * 
     */
    public Optional<Output<String>> interfaceId() {
        return Optional.ofNullable(this.interfaceId);
    }

    /**
     * Region of the gateway
     * 
     */
    @Import(name="region", required=true)
    private Output<String> region;

    /**
     * @return Region of the gateway
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    /**
     * ID of the cloud project
     * 
     */
    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    /**
     * @return ID of the cloud project
     * 
     */
    public Output<String> serviceName() {
        return this.serviceName;
    }

    /**
     * ID of the subnet to add
     * 
     */
    @Import(name="subnetId", required=true)
    private Output<String> subnetId;

    /**
     * @return ID of the subnet to add
     * 
     */
    public Output<String> subnetId() {
        return this.subnetId;
    }

    private GatewayInterfaceArgs() {}

    private GatewayInterfaceArgs(GatewayInterfaceArgs $) {
        this.interfaceId = $.interfaceId;
        this.region = $.region;
        this.serviceName = $.serviceName;
        this.subnetId = $.subnetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GatewayInterfaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GatewayInterfaceArgs $;

        public Builder() {
            $ = new GatewayInterfaceArgs();
        }

        public Builder(GatewayInterfaceArgs defaults) {
            $ = new GatewayInterfaceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param interfaceId ID of the interface
         * 
         * @return builder
         * 
         */
        public Builder interfaceId(@Nullable Output<String> interfaceId) {
            $.interfaceId = interfaceId;
            return this;
        }

        /**
         * @param interfaceId ID of the interface
         * 
         * @return builder
         * 
         */
        public Builder interfaceId(String interfaceId) {
            return interfaceId(Output.of(interfaceId));
        }

        /**
         * @param region Region of the gateway
         * 
         * @return builder
         * 
         */
        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Region of the gateway
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param serviceName ID of the cloud project
         * 
         * @return builder
         * 
         */
        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName ID of the cloud project
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param subnetId ID of the subnet to add
         * 
         * @return builder
         * 
         */
        public Builder subnetId(Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId ID of the subnet to add
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        public GatewayInterfaceArgs build() {
            if ($.region == null) {
                throw new MissingRequiredPropertyException("GatewayInterfaceArgs", "region");
            }
            if ($.serviceName == null) {
                throw new MissingRequiredPropertyException("GatewayInterfaceArgs", "serviceName");
            }
            if ($.subnetId == null) {
                throw new MissingRequiredPropertyException("GatewayInterfaceArgs", "subnetId");
            }
            return $;
        }
    }

}
