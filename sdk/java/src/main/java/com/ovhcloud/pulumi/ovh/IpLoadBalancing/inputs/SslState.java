// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.IpLoadBalancing.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SslState extends com.pulumi.resources.ResourceArgs {

    public static final SslState Empty = new SslState();

    /**
     * Certificate
     * 
     */
    @Import(name="certificate")
    private @Nullable Output<String> certificate;

    /**
     * @return Certificate
     * 
     */
    public Optional<Output<String>> certificate() {
        return Optional.ofNullable(this.certificate);
    }

    /**
     * Certificate chain
     * 
     */
    @Import(name="chain")
    private @Nullable Output<String> chain;

    /**
     * @return Certificate chain
     * 
     */
    public Optional<Output<String>> chain() {
        return Optional.ofNullable(this.chain);
    }

    /**
     * Readable label for loadbalancer ssl
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Readable label for loadbalancer ssl
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Expire date of your SSL certificate.
     * 
     */
    @Import(name="expireDate")
    private @Nullable Output<String> expireDate;

    /**
     * @return Expire date of your SSL certificate.
     * 
     */
    public Optional<Output<String>> expireDate() {
        return Optional.ofNullable(this.expireDate);
    }

    /**
     * Fingerprint of your SSL certificate.
     * 
     */
    @Import(name="fingerprint")
    private @Nullable Output<String> fingerprint;

    /**
     * @return Fingerprint of your SSL certificate.
     * 
     */
    public Optional<Output<String>> fingerprint() {
        return Optional.ofNullable(this.fingerprint);
    }

    /**
     * Certificate key
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return Certificate key
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * Subject Alternative Name of your SSL certificate.
     * 
     */
    @Import(name="sans")
    private @Nullable Output<List<String>> sans;

    /**
     * @return Subject Alternative Name of your SSL certificate.
     * 
     */
    public Optional<Output<List<String>>> sans() {
        return Optional.ofNullable(this.sans);
    }

    /**
     * Serial of your SSL certificate (Deprecated, use fingerprint instead !)
     * 
     */
    @Import(name="serial")
    private @Nullable Output<String> serial;

    /**
     * @return Serial of your SSL certificate (Deprecated, use fingerprint instead !)
     * 
     */
    public Optional<Output<String>> serial() {
        return Optional.ofNullable(this.serial);
    }

    /**
     * The internal name of your IP load balancing
     * 
     */
    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    /**
     * @return The internal name of your IP load balancing
     * 
     */
    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * Subject of your SSL certificate.
     * 
     */
    @Import(name="subject")
    private @Nullable Output<String> subject;

    /**
     * @return Subject of your SSL certificate.
     * 
     */
    public Optional<Output<String>> subject() {
        return Optional.ofNullable(this.subject);
    }

    /**
     * Type of your SSL certificate. &#39;built&#39; for SSL certificates managed by the IP Load Balancing. &#39;custom&#39; for user manager certificates.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of your SSL certificate. &#39;built&#39; for SSL certificates managed by the IP Load Balancing. &#39;custom&#39; for user manager certificates.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private SslState() {}

    private SslState(SslState $) {
        this.certificate = $.certificate;
        this.chain = $.chain;
        this.displayName = $.displayName;
        this.expireDate = $.expireDate;
        this.fingerprint = $.fingerprint;
        this.key = $.key;
        this.sans = $.sans;
        this.serial = $.serial;
        this.serviceName = $.serviceName;
        this.subject = $.subject;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SslState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SslState $;

        public Builder() {
            $ = new SslState();
        }

        public Builder(SslState defaults) {
            $ = new SslState(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificate Certificate
         * 
         * @return builder
         * 
         */
        public Builder certificate(@Nullable Output<String> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate Certificate
         * 
         * @return builder
         * 
         */
        public Builder certificate(String certificate) {
            return certificate(Output.of(certificate));
        }

        /**
         * @param chain Certificate chain
         * 
         * @return builder
         * 
         */
        public Builder chain(@Nullable Output<String> chain) {
            $.chain = chain;
            return this;
        }

        /**
         * @param chain Certificate chain
         * 
         * @return builder
         * 
         */
        public Builder chain(String chain) {
            return chain(Output.of(chain));
        }

        /**
         * @param displayName Readable label for loadbalancer ssl
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Readable label for loadbalancer ssl
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param expireDate Expire date of your SSL certificate.
         * 
         * @return builder
         * 
         */
        public Builder expireDate(@Nullable Output<String> expireDate) {
            $.expireDate = expireDate;
            return this;
        }

        /**
         * @param expireDate Expire date of your SSL certificate.
         * 
         * @return builder
         * 
         */
        public Builder expireDate(String expireDate) {
            return expireDate(Output.of(expireDate));
        }

        /**
         * @param fingerprint Fingerprint of your SSL certificate.
         * 
         * @return builder
         * 
         */
        public Builder fingerprint(@Nullable Output<String> fingerprint) {
            $.fingerprint = fingerprint;
            return this;
        }

        /**
         * @param fingerprint Fingerprint of your SSL certificate.
         * 
         * @return builder
         * 
         */
        public Builder fingerprint(String fingerprint) {
            return fingerprint(Output.of(fingerprint));
        }

        /**
         * @param key Certificate key
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key Certificate key
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param sans Subject Alternative Name of your SSL certificate.
         * 
         * @return builder
         * 
         */
        public Builder sans(@Nullable Output<List<String>> sans) {
            $.sans = sans;
            return this;
        }

        /**
         * @param sans Subject Alternative Name of your SSL certificate.
         * 
         * @return builder
         * 
         */
        public Builder sans(List<String> sans) {
            return sans(Output.of(sans));
        }

        /**
         * @param sans Subject Alternative Name of your SSL certificate.
         * 
         * @return builder
         * 
         */
        public Builder sans(String... sans) {
            return sans(List.of(sans));
        }

        /**
         * @param serial Serial of your SSL certificate (Deprecated, use fingerprint instead !)
         * 
         * @return builder
         * 
         */
        public Builder serial(@Nullable Output<String> serial) {
            $.serial = serial;
            return this;
        }

        /**
         * @param serial Serial of your SSL certificate (Deprecated, use fingerprint instead !)
         * 
         * @return builder
         * 
         */
        public Builder serial(String serial) {
            return serial(Output.of(serial));
        }

        /**
         * @param serviceName The internal name of your IP load balancing
         * 
         * @return builder
         * 
         */
        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The internal name of your IP load balancing
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param subject Subject of your SSL certificate.
         * 
         * @return builder
         * 
         */
        public Builder subject(@Nullable Output<String> subject) {
            $.subject = subject;
            return this;
        }

        /**
         * @param subject Subject of your SSL certificate.
         * 
         * @return builder
         * 
         */
        public Builder subject(String subject) {
            return subject(Output.of(subject));
        }

        /**
         * @param type Type of your SSL certificate. &#39;built&#39; for SSL certificates managed by the IP Load Balancing. &#39;custom&#39; for user manager certificates.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of your SSL certificate. &#39;built&#39; for SSL certificates managed by the IP Load Balancing. &#39;custom&#39; for user manager certificates.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public SslState build() {
            return $;
        }
    }

}
