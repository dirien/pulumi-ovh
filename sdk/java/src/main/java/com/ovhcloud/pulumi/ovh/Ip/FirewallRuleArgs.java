// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.Ip;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FirewallRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final FirewallRuleArgs Empty = new FirewallRuleArgs();

    /**
     * Possible values for action (deny|permit)
     * 
     */
    @Import(name="action", required=true)
    private Output<String> action;

    /**
     * @return Possible values for action (deny|permit)
     * 
     */
    public Output<String> action() {
        return this.action;
    }

    /**
     * Destination port for your rule. Only with TCP/UDP protocol
     * 
     */
    @Import(name="destinationPort")
    private @Nullable Output<Double> destinationPort;

    /**
     * @return Destination port for your rule. Only with TCP/UDP protocol
     * 
     */
    public Optional<Output<Double>> destinationPort() {
        return Optional.ofNullable(this.destinationPort);
    }

    /**
     * Fragments option
     * 
     */
    @Import(name="fragments")
    private @Nullable Output<Boolean> fragments;

    /**
     * @return Fragments option
     * 
     */
    public Optional<Output<Boolean>> fragments() {
        return Optional.ofNullable(this.fragments);
    }

    /**
     * The IP or the CIDR
     * 
     */
    @Import(name="ip", required=true)
    private Output<String> ip;

    /**
     * @return The IP or the CIDR
     * 
     */
    public Output<String> ip() {
        return this.ip;
    }

    /**
     * IPv4 address
     * 
     */
    @Import(name="ipOnFirewall", required=true)
    private Output<String> ipOnFirewall;

    /**
     * @return IPv4 address
     * 
     */
    public Output<String> ipOnFirewall() {
        return this.ipOnFirewall;
    }

    /**
     * Possible values for protocol (ah|esp|gre|icmp|ipv4|tcp|udp)
     * 
     */
    @Import(name="protocol", required=true)
    private Output<String> protocol;

    /**
     * @return Possible values for protocol (ah|esp|gre|icmp|ipv4|tcp|udp)
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }

    /**
     * Rule position in the rules array
     * 
     */
    @Import(name="sequence", required=true)
    private Output<Double> sequence;

    /**
     * @return Rule position in the rules array
     * 
     */
    public Output<Double> sequence() {
        return this.sequence;
    }

    /**
     * IPv4 CIDR notation (e.g., 192.0.2.0/24)
     * 
     */
    @Import(name="source")
    private @Nullable Output<String> source;

    /**
     * @return IPv4 CIDR notation (e.g., 192.0.2.0/24)
     * 
     */
    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * Source port for your rule. Only with TCP/UDP protocol
     * 
     */
    @Import(name="sourcePort")
    private @Nullable Output<Double> sourcePort;

    /**
     * @return Source port for your rule. Only with TCP/UDP protocol
     * 
     */
    public Optional<Output<Double>> sourcePort() {
        return Optional.ofNullable(this.sourcePort);
    }

    /**
     * TCP option on your rule (syn|established)
     * 
     */
    @Import(name="tcpOption")
    private @Nullable Output<String> tcpOption;

    /**
     * @return TCP option on your rule (syn|established)
     * 
     */
    public Optional<Output<String>> tcpOption() {
        return Optional.ofNullable(this.tcpOption);
    }

    private FirewallRuleArgs() {}

    private FirewallRuleArgs(FirewallRuleArgs $) {
        this.action = $.action;
        this.destinationPort = $.destinationPort;
        this.fragments = $.fragments;
        this.ip = $.ip;
        this.ipOnFirewall = $.ipOnFirewall;
        this.protocol = $.protocol;
        this.sequence = $.sequence;
        this.source = $.source;
        this.sourcePort = $.sourcePort;
        this.tcpOption = $.tcpOption;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FirewallRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FirewallRuleArgs $;

        public Builder() {
            $ = new FirewallRuleArgs();
        }

        public Builder(FirewallRuleArgs defaults) {
            $ = new FirewallRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action Possible values for action (deny|permit)
         * 
         * @return builder
         * 
         */
        public Builder action(Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action Possible values for action (deny|permit)
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param destinationPort Destination port for your rule. Only with TCP/UDP protocol
         * 
         * @return builder
         * 
         */
        public Builder destinationPort(@Nullable Output<Double> destinationPort) {
            $.destinationPort = destinationPort;
            return this;
        }

        /**
         * @param destinationPort Destination port for your rule. Only with TCP/UDP protocol
         * 
         * @return builder
         * 
         */
        public Builder destinationPort(Double destinationPort) {
            return destinationPort(Output.of(destinationPort));
        }

        /**
         * @param fragments Fragments option
         * 
         * @return builder
         * 
         */
        public Builder fragments(@Nullable Output<Boolean> fragments) {
            $.fragments = fragments;
            return this;
        }

        /**
         * @param fragments Fragments option
         * 
         * @return builder
         * 
         */
        public Builder fragments(Boolean fragments) {
            return fragments(Output.of(fragments));
        }

        /**
         * @param ip The IP or the CIDR
         * 
         * @return builder
         * 
         */
        public Builder ip(Output<String> ip) {
            $.ip = ip;
            return this;
        }

        /**
         * @param ip The IP or the CIDR
         * 
         * @return builder
         * 
         */
        public Builder ip(String ip) {
            return ip(Output.of(ip));
        }

        /**
         * @param ipOnFirewall IPv4 address
         * 
         * @return builder
         * 
         */
        public Builder ipOnFirewall(Output<String> ipOnFirewall) {
            $.ipOnFirewall = ipOnFirewall;
            return this;
        }

        /**
         * @param ipOnFirewall IPv4 address
         * 
         * @return builder
         * 
         */
        public Builder ipOnFirewall(String ipOnFirewall) {
            return ipOnFirewall(Output.of(ipOnFirewall));
        }

        /**
         * @param protocol Possible values for protocol (ah|esp|gre|icmp|ipv4|tcp|udp)
         * 
         * @return builder
         * 
         */
        public Builder protocol(Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol Possible values for protocol (ah|esp|gre|icmp|ipv4|tcp|udp)
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param sequence Rule position in the rules array
         * 
         * @return builder
         * 
         */
        public Builder sequence(Output<Double> sequence) {
            $.sequence = sequence;
            return this;
        }

        /**
         * @param sequence Rule position in the rules array
         * 
         * @return builder
         * 
         */
        public Builder sequence(Double sequence) {
            return sequence(Output.of(sequence));
        }

        /**
         * @param source IPv4 CIDR notation (e.g., 192.0.2.0/24)
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source IPv4 CIDR notation (e.g., 192.0.2.0/24)
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        /**
         * @param sourcePort Source port for your rule. Only with TCP/UDP protocol
         * 
         * @return builder
         * 
         */
        public Builder sourcePort(@Nullable Output<Double> sourcePort) {
            $.sourcePort = sourcePort;
            return this;
        }

        /**
         * @param sourcePort Source port for your rule. Only with TCP/UDP protocol
         * 
         * @return builder
         * 
         */
        public Builder sourcePort(Double sourcePort) {
            return sourcePort(Output.of(sourcePort));
        }

        /**
         * @param tcpOption TCP option on your rule (syn|established)
         * 
         * @return builder
         * 
         */
        public Builder tcpOption(@Nullable Output<String> tcpOption) {
            $.tcpOption = tcpOption;
            return this;
        }

        /**
         * @param tcpOption TCP option on your rule (syn|established)
         * 
         * @return builder
         * 
         */
        public Builder tcpOption(String tcpOption) {
            return tcpOption(Output.of(tcpOption));
        }

        public FirewallRuleArgs build() {
            if ($.action == null) {
                throw new MissingRequiredPropertyException("FirewallRuleArgs", "action");
            }
            if ($.ip == null) {
                throw new MissingRequiredPropertyException("FirewallRuleArgs", "ip");
            }
            if ($.ipOnFirewall == null) {
                throw new MissingRequiredPropertyException("FirewallRuleArgs", "ipOnFirewall");
            }
            if ($.protocol == null) {
                throw new MissingRequiredPropertyException("FirewallRuleArgs", "protocol");
            }
            if ($.sequence == null) {
                throw new MissingRequiredPropertyException("FirewallRuleArgs", "sequence");
            }
            return $;
        }
    }

}
