// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.Domain.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZoneImportState extends com.pulumi.resources.ResourceArgs {

    public static final ZoneImportState Empty = new ZoneImportState();

    /**
     * Zone file exported from the API
     * 
     */
    @Import(name="exportedContent")
    private @Nullable Output<String> exportedContent;

    /**
     * @return Zone file exported from the API
     * 
     */
    public Optional<Output<String>> exportedContent() {
        return Optional.ofNullable(this.exportedContent);
    }

    /**
     * Content of the zone file to import
     * 
     */
    @Import(name="zoneFile")
    private @Nullable Output<String> zoneFile;

    /**
     * @return Content of the zone file to import
     * 
     */
    public Optional<Output<String>> zoneFile() {
        return Optional.ofNullable(this.zoneFile);
    }

    /**
     * The name of the domain zone
     * 
     */
    @Import(name="zoneName")
    private @Nullable Output<String> zoneName;

    /**
     * @return The name of the domain zone
     * 
     */
    public Optional<Output<String>> zoneName() {
        return Optional.ofNullable(this.zoneName);
    }

    private ZoneImportState() {}

    private ZoneImportState(ZoneImportState $) {
        this.exportedContent = $.exportedContent;
        this.zoneFile = $.zoneFile;
        this.zoneName = $.zoneName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZoneImportState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZoneImportState $;

        public Builder() {
            $ = new ZoneImportState();
        }

        public Builder(ZoneImportState defaults) {
            $ = new ZoneImportState(Objects.requireNonNull(defaults));
        }

        /**
         * @param exportedContent Zone file exported from the API
         * 
         * @return builder
         * 
         */
        public Builder exportedContent(@Nullable Output<String> exportedContent) {
            $.exportedContent = exportedContent;
            return this;
        }

        /**
         * @param exportedContent Zone file exported from the API
         * 
         * @return builder
         * 
         */
        public Builder exportedContent(String exportedContent) {
            return exportedContent(Output.of(exportedContent));
        }

        /**
         * @param zoneFile Content of the zone file to import
         * 
         * @return builder
         * 
         */
        public Builder zoneFile(@Nullable Output<String> zoneFile) {
            $.zoneFile = zoneFile;
            return this;
        }

        /**
         * @param zoneFile Content of the zone file to import
         * 
         * @return builder
         * 
         */
        public Builder zoneFile(String zoneFile) {
            return zoneFile(Output.of(zoneFile));
        }

        /**
         * @param zoneName The name of the domain zone
         * 
         * @return builder
         * 
         */
        public Builder zoneName(@Nullable Output<String> zoneName) {
            $.zoneName = zoneName;
            return this;
        }

        /**
         * @param zoneName The name of the domain zone
         * 
         * @return builder
         * 
         */
        public Builder zoneName(String zoneName) {
            return zoneName(Output.of(zoneName));
        }

        public ZoneImportState build() {
            return $;
        }
    }

}
