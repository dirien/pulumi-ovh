// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.Iam.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPolicyPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetPolicyPlainArgs Empty = new GetPolicyPlainArgs();

    /**
     * Set of actions allowed by the policy.
     * 
     */
    @Import(name="allows")
    private @Nullable List<String> allows;

    /**
     * @return Set of actions allowed by the policy.
     * 
     */
    public Optional<List<String>> allows() {
        return Optional.ofNullable(this.allows);
    }

    /**
     * Set of actions that will be denied no matter what policy exists.
     * 
     */
    @Import(name="denies")
    private @Nullable List<String> denies;

    /**
     * @return Set of actions that will be denied no matter what policy exists.
     * 
     */
    public Optional<List<String>> denies() {
        return Optional.ofNullable(this.denies);
    }

    /**
     * Group description.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return Group description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Set of actions that will be subtracted from the `allow` list.
     * 
     */
    @Import(name="excepts")
    private @Nullable List<String> excepts;

    /**
     * @return Set of actions that will be subtracted from the `allow` list.
     * 
     */
    public Optional<List<String>> excepts() {
        return Optional.ofNullable(this.excepts);
    }

    /**
     * UUID of the policy.
     * 
     */
    @Import(name="id", required=true)
    private String id;

    /**
     * @return UUID of the policy.
     * 
     */
    public String id() {
        return this.id;
    }

    /**
     * Set of permissions groups that apply to the policy.
     * 
     */
    @Import(name="permissionsGroups")
    private @Nullable List<String> permissionsGroups;

    /**
     * @return Set of permissions groups that apply to the policy.
     * 
     */
    public Optional<List<String>> permissionsGroups() {
        return Optional.ofNullable(this.permissionsGroups);
    }

    private GetPolicyPlainArgs() {}

    private GetPolicyPlainArgs(GetPolicyPlainArgs $) {
        this.allows = $.allows;
        this.denies = $.denies;
        this.description = $.description;
        this.excepts = $.excepts;
        this.id = $.id;
        this.permissionsGroups = $.permissionsGroups;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPolicyPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPolicyPlainArgs $;

        public Builder() {
            $ = new GetPolicyPlainArgs();
        }

        public Builder(GetPolicyPlainArgs defaults) {
            $ = new GetPolicyPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allows Set of actions allowed by the policy.
         * 
         * @return builder
         * 
         */
        public Builder allows(@Nullable List<String> allows) {
            $.allows = allows;
            return this;
        }

        /**
         * @param allows Set of actions allowed by the policy.
         * 
         * @return builder
         * 
         */
        public Builder allows(String... allows) {
            return allows(List.of(allows));
        }

        /**
         * @param denies Set of actions that will be denied no matter what policy exists.
         * 
         * @return builder
         * 
         */
        public Builder denies(@Nullable List<String> denies) {
            $.denies = denies;
            return this;
        }

        /**
         * @param denies Set of actions that will be denied no matter what policy exists.
         * 
         * @return builder
         * 
         */
        public Builder denies(String... denies) {
            return denies(List.of(denies));
        }

        /**
         * @param description Group description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param excepts Set of actions that will be subtracted from the `allow` list.
         * 
         * @return builder
         * 
         */
        public Builder excepts(@Nullable List<String> excepts) {
            $.excepts = excepts;
            return this;
        }

        /**
         * @param excepts Set of actions that will be subtracted from the `allow` list.
         * 
         * @return builder
         * 
         */
        public Builder excepts(String... excepts) {
            return excepts(List.of(excepts));
        }

        /**
         * @param id UUID of the policy.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            $.id = id;
            return this;
        }

        /**
         * @param permissionsGroups Set of permissions groups that apply to the policy.
         * 
         * @return builder
         * 
         */
        public Builder permissionsGroups(@Nullable List<String> permissionsGroups) {
            $.permissionsGroups = permissionsGroups;
            return this;
        }

        /**
         * @param permissionsGroups Set of permissions groups that apply to the policy.
         * 
         * @return builder
         * 
         */
        public Builder permissionsGroups(String... permissionsGroups) {
            return permissionsGroups(List.of(permissionsGroups));
        }

        public GetPolicyPlainArgs build() {
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetPolicyPlainArgs", "id");
            }
            return $;
        }
    }

}
