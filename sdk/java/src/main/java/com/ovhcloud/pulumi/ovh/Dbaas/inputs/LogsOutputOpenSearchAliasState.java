// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.Dbaas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LogsOutputOpenSearchAliasState extends com.pulumi.resources.ResourceArgs {

    public static final LogsOutputOpenSearchAliasState Empty = new LogsOutputOpenSearchAliasState();

    /**
     * Alias Id
     * 
     */
    @Import(name="aliasId")
    private @Nullable Output<String> aliasId;

    /**
     * @return Alias Id
     * 
     */
    public Optional<Output<String>> aliasId() {
        return Optional.ofNullable(this.aliasId);
    }

    /**
     * Alias creation
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return Alias creation
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * Current alias size (in bytes)
     * 
     */
    @Import(name="currentSize")
    private @Nullable Output<Integer> currentSize;

    /**
     * @return Current alias size (in bytes)
     * 
     */
    public Optional<Output<Integer>> currentSize() {
        return Optional.ofNullable(this.currentSize);
    }

    /**
     * Index description
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Index description
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * List of attached indexes id
     * 
     */
    @Import(name="indexes")
    private @Nullable Output<List<String>> indexes;

    /**
     * @return List of attached indexes id
     * 
     */
    public Optional<Output<List<String>>> indexes() {
        return Optional.ofNullable(this.indexes);
    }

    /**
     * Indicates if you are allowed to edit entry
     * 
     */
    @Import(name="isEditable")
    private @Nullable Output<Boolean> isEditable;

    /**
     * @return Indicates if you are allowed to edit entry
     * 
     */
    public Optional<Output<Boolean>> isEditable() {
        return Optional.ofNullable(this.isEditable);
    }

    /**
     * Alias name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Alias name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Number of indices linked
     * 
     */
    @Import(name="nbIndex")
    private @Nullable Output<Integer> nbIndex;

    /**
     * @return Number of indices linked
     * 
     */
    public Optional<Output<Integer>> nbIndex() {
        return Optional.ofNullable(this.nbIndex);
    }

    /**
     * Number of streams linked
     * 
     */
    @Import(name="nbStream")
    private @Nullable Output<Integer> nbStream;

    /**
     * @return Number of streams linked
     * 
     */
    public Optional<Output<Integer>> nbStream() {
        return Optional.ofNullable(this.nbStream);
    }

    /**
     * The service name
     * 
     */
    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    /**
     * @return The service name
     * 
     */
    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * List of attached streams id
     * 
     */
    @Import(name="streams")
    private @Nullable Output<List<String>> streams;

    /**
     * @return List of attached streams id
     * 
     */
    public Optional<Output<List<String>>> streams() {
        return Optional.ofNullable(this.streams);
    }

    /**
     * Index suffix
     * 
     */
    @Import(name="suffix")
    private @Nullable Output<String> suffix;

    /**
     * @return Index suffix
     * 
     */
    public Optional<Output<String>> suffix() {
        return Optional.ofNullable(this.suffix);
    }

    /**
     * Input last update
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    /**
     * @return Input last update
     * 
     */
    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    private LogsOutputOpenSearchAliasState() {}

    private LogsOutputOpenSearchAliasState(LogsOutputOpenSearchAliasState $) {
        this.aliasId = $.aliasId;
        this.createdAt = $.createdAt;
        this.currentSize = $.currentSize;
        this.description = $.description;
        this.indexes = $.indexes;
        this.isEditable = $.isEditable;
        this.name = $.name;
        this.nbIndex = $.nbIndex;
        this.nbStream = $.nbStream;
        this.serviceName = $.serviceName;
        this.streams = $.streams;
        this.suffix = $.suffix;
        this.updatedAt = $.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogsOutputOpenSearchAliasState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogsOutputOpenSearchAliasState $;

        public Builder() {
            $ = new LogsOutputOpenSearchAliasState();
        }

        public Builder(LogsOutputOpenSearchAliasState defaults) {
            $ = new LogsOutputOpenSearchAliasState(Objects.requireNonNull(defaults));
        }

        /**
         * @param aliasId Alias Id
         * 
         * @return builder
         * 
         */
        public Builder aliasId(@Nullable Output<String> aliasId) {
            $.aliasId = aliasId;
            return this;
        }

        /**
         * @param aliasId Alias Id
         * 
         * @return builder
         * 
         */
        public Builder aliasId(String aliasId) {
            return aliasId(Output.of(aliasId));
        }

        /**
         * @param createdAt Alias creation
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt Alias creation
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param currentSize Current alias size (in bytes)
         * 
         * @return builder
         * 
         */
        public Builder currentSize(@Nullable Output<Integer> currentSize) {
            $.currentSize = currentSize;
            return this;
        }

        /**
         * @param currentSize Current alias size (in bytes)
         * 
         * @return builder
         * 
         */
        public Builder currentSize(Integer currentSize) {
            return currentSize(Output.of(currentSize));
        }

        /**
         * @param description Index description
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Index description
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param indexes List of attached indexes id
         * 
         * @return builder
         * 
         */
        public Builder indexes(@Nullable Output<List<String>> indexes) {
            $.indexes = indexes;
            return this;
        }

        /**
         * @param indexes List of attached indexes id
         * 
         * @return builder
         * 
         */
        public Builder indexes(List<String> indexes) {
            return indexes(Output.of(indexes));
        }

        /**
         * @param indexes List of attached indexes id
         * 
         * @return builder
         * 
         */
        public Builder indexes(String... indexes) {
            return indexes(List.of(indexes));
        }

        /**
         * @param isEditable Indicates if you are allowed to edit entry
         * 
         * @return builder
         * 
         */
        public Builder isEditable(@Nullable Output<Boolean> isEditable) {
            $.isEditable = isEditable;
            return this;
        }

        /**
         * @param isEditable Indicates if you are allowed to edit entry
         * 
         * @return builder
         * 
         */
        public Builder isEditable(Boolean isEditable) {
            return isEditable(Output.of(isEditable));
        }

        /**
         * @param name Alias name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Alias name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nbIndex Number of indices linked
         * 
         * @return builder
         * 
         */
        public Builder nbIndex(@Nullable Output<Integer> nbIndex) {
            $.nbIndex = nbIndex;
            return this;
        }

        /**
         * @param nbIndex Number of indices linked
         * 
         * @return builder
         * 
         */
        public Builder nbIndex(Integer nbIndex) {
            return nbIndex(Output.of(nbIndex));
        }

        /**
         * @param nbStream Number of streams linked
         * 
         * @return builder
         * 
         */
        public Builder nbStream(@Nullable Output<Integer> nbStream) {
            $.nbStream = nbStream;
            return this;
        }

        /**
         * @param nbStream Number of streams linked
         * 
         * @return builder
         * 
         */
        public Builder nbStream(Integer nbStream) {
            return nbStream(Output.of(nbStream));
        }

        /**
         * @param serviceName The service name
         * 
         * @return builder
         * 
         */
        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The service name
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param streams List of attached streams id
         * 
         * @return builder
         * 
         */
        public Builder streams(@Nullable Output<List<String>> streams) {
            $.streams = streams;
            return this;
        }

        /**
         * @param streams List of attached streams id
         * 
         * @return builder
         * 
         */
        public Builder streams(List<String> streams) {
            return streams(Output.of(streams));
        }

        /**
         * @param streams List of attached streams id
         * 
         * @return builder
         * 
         */
        public Builder streams(String... streams) {
            return streams(List.of(streams));
        }

        /**
         * @param suffix Index suffix
         * 
         * @return builder
         * 
         */
        public Builder suffix(@Nullable Output<String> suffix) {
            $.suffix = suffix;
            return this;
        }

        /**
         * @param suffix Index suffix
         * 
         * @return builder
         * 
         */
        public Builder suffix(String suffix) {
            return suffix(Output.of(suffix));
        }

        /**
         * @param updatedAt Input last update
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt Input last update
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        public LogsOutputOpenSearchAliasState build() {
            return $;
        }
    }

}
