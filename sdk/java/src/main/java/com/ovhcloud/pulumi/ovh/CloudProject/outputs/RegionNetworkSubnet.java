// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.CloudProject.outputs;

import com.ovhcloud.pulumi.ovh.CloudProject.outputs.RegionNetworkSubnetAllocationPool;
import com.ovhcloud.pulumi.ovh.CloudProject.outputs.RegionNetworkSubnetHostRoute;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RegionNetworkSubnet {
    /**
     * @return List of IP pools allocated in subnet
     * 
     */
    private @Nullable List<RegionNetworkSubnetAllocationPool> allocationPools;
    /**
     * @return Subnet range in CIDR notation
     * 
     */
    private String cidr;
    /**
     * @return DNS nameservers
     * 
     */
    private @Nullable List<String> dnsNameServers;
    /**
     * @return Enable DHCP for the subnet
     * 
     */
    private Boolean enableDhcp;
    /**
     * @return Set a gateway ip for the subnet
     * 
     */
    private Boolean enableGatewayIp;
    /**
     * @return Gateway IP
     * 
     */
    private @Nullable String gatewayIp;
    /**
     * @return Host routes
     * 
     */
    private @Nullable List<RegionNetworkSubnetHostRoute> hostRoutes;
    /**
     * @return IP version
     * 
     */
    private Double ipVersion;
    /**
     * @return Subnet name
     * 
     */
    private @Nullable String name;
    /**
     * @return Use default DNS
     * 
     */
    private @Nullable Boolean useDefaultPublicDnsresolver;

    private RegionNetworkSubnet() {}
    /**
     * @return List of IP pools allocated in subnet
     * 
     */
    public List<RegionNetworkSubnetAllocationPool> allocationPools() {
        return this.allocationPools == null ? List.of() : this.allocationPools;
    }
    /**
     * @return Subnet range in CIDR notation
     * 
     */
    public String cidr() {
        return this.cidr;
    }
    /**
     * @return DNS nameservers
     * 
     */
    public List<String> dnsNameServers() {
        return this.dnsNameServers == null ? List.of() : this.dnsNameServers;
    }
    /**
     * @return Enable DHCP for the subnet
     * 
     */
    public Boolean enableDhcp() {
        return this.enableDhcp;
    }
    /**
     * @return Set a gateway ip for the subnet
     * 
     */
    public Boolean enableGatewayIp() {
        return this.enableGatewayIp;
    }
    /**
     * @return Gateway IP
     * 
     */
    public Optional<String> gatewayIp() {
        return Optional.ofNullable(this.gatewayIp);
    }
    /**
     * @return Host routes
     * 
     */
    public List<RegionNetworkSubnetHostRoute> hostRoutes() {
        return this.hostRoutes == null ? List.of() : this.hostRoutes;
    }
    /**
     * @return IP version
     * 
     */
    public Double ipVersion() {
        return this.ipVersion;
    }
    /**
     * @return Subnet name
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Use default DNS
     * 
     */
    public Optional<Boolean> useDefaultPublicDnsresolver() {
        return Optional.ofNullable(this.useDefaultPublicDnsresolver);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegionNetworkSubnet defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<RegionNetworkSubnetAllocationPool> allocationPools;
        private String cidr;
        private @Nullable List<String> dnsNameServers;
        private Boolean enableDhcp;
        private Boolean enableGatewayIp;
        private @Nullable String gatewayIp;
        private @Nullable List<RegionNetworkSubnetHostRoute> hostRoutes;
        private Double ipVersion;
        private @Nullable String name;
        private @Nullable Boolean useDefaultPublicDnsresolver;
        public Builder() {}
        public Builder(RegionNetworkSubnet defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allocationPools = defaults.allocationPools;
    	      this.cidr = defaults.cidr;
    	      this.dnsNameServers = defaults.dnsNameServers;
    	      this.enableDhcp = defaults.enableDhcp;
    	      this.enableGatewayIp = defaults.enableGatewayIp;
    	      this.gatewayIp = defaults.gatewayIp;
    	      this.hostRoutes = defaults.hostRoutes;
    	      this.ipVersion = defaults.ipVersion;
    	      this.name = defaults.name;
    	      this.useDefaultPublicDnsresolver = defaults.useDefaultPublicDnsresolver;
        }

        @CustomType.Setter
        public Builder allocationPools(@Nullable List<RegionNetworkSubnetAllocationPool> allocationPools) {

            this.allocationPools = allocationPools;
            return this;
        }
        public Builder allocationPools(RegionNetworkSubnetAllocationPool... allocationPools) {
            return allocationPools(List.of(allocationPools));
        }
        @CustomType.Setter
        public Builder cidr(String cidr) {
            if (cidr == null) {
              throw new MissingRequiredPropertyException("RegionNetworkSubnet", "cidr");
            }
            this.cidr = cidr;
            return this;
        }
        @CustomType.Setter
        public Builder dnsNameServers(@Nullable List<String> dnsNameServers) {

            this.dnsNameServers = dnsNameServers;
            return this;
        }
        public Builder dnsNameServers(String... dnsNameServers) {
            return dnsNameServers(List.of(dnsNameServers));
        }
        @CustomType.Setter
        public Builder enableDhcp(Boolean enableDhcp) {
            if (enableDhcp == null) {
              throw new MissingRequiredPropertyException("RegionNetworkSubnet", "enableDhcp");
            }
            this.enableDhcp = enableDhcp;
            return this;
        }
        @CustomType.Setter
        public Builder enableGatewayIp(Boolean enableGatewayIp) {
            if (enableGatewayIp == null) {
              throw new MissingRequiredPropertyException("RegionNetworkSubnet", "enableGatewayIp");
            }
            this.enableGatewayIp = enableGatewayIp;
            return this;
        }
        @CustomType.Setter
        public Builder gatewayIp(@Nullable String gatewayIp) {

            this.gatewayIp = gatewayIp;
            return this;
        }
        @CustomType.Setter
        public Builder hostRoutes(@Nullable List<RegionNetworkSubnetHostRoute> hostRoutes) {

            this.hostRoutes = hostRoutes;
            return this;
        }
        public Builder hostRoutes(RegionNetworkSubnetHostRoute... hostRoutes) {
            return hostRoutes(List.of(hostRoutes));
        }
        @CustomType.Setter
        public Builder ipVersion(Double ipVersion) {
            if (ipVersion == null) {
              throw new MissingRequiredPropertyException("RegionNetworkSubnet", "ipVersion");
            }
            this.ipVersion = ipVersion;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder useDefaultPublicDnsresolver(@Nullable Boolean useDefaultPublicDnsresolver) {

            this.useDefaultPublicDnsresolver = useDefaultPublicDnsresolver;
            return this;
        }
        public RegionNetworkSubnet build() {
            final var _resultValue = new RegionNetworkSubnet();
            _resultValue.allocationPools = allocationPools;
            _resultValue.cidr = cidr;
            _resultValue.dnsNameServers = dnsNameServers;
            _resultValue.enableDhcp = enableDhcp;
            _resultValue.enableGatewayIp = enableGatewayIp;
            _resultValue.gatewayIp = gatewayIp;
            _resultValue.hostRoutes = hostRoutes;
            _resultValue.ipVersion = ipVersion;
            _resultValue.name = name;
            _resultValue.useDefaultPublicDnsresolver = useDefaultPublicDnsresolver;
            return _resultValue;
        }
    }
}
