// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.CloudProject.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetNetworkPrivateSubnetsSubnetIpPool {
    /**
     * @return Whether or not if DHCP is enabled
     * 
     */
    private Boolean dhcp;
    /**
     * @return Last IP for this region (eg: 192.168.1.24)
     * 
     */
    private String end;
    /**
     * @return Global network with cidr (eg: 192.168.1.0/24)
     * 
     */
    private String network;
    /**
     * @return Region associated to the subnet
     * 
     */
    private String region;
    /**
     * @return First IP for this region (eg: 192.168.1.12)
     * 
     */
    private String start;

    private GetNetworkPrivateSubnetsSubnetIpPool() {}
    /**
     * @return Whether or not if DHCP is enabled
     * 
     */
    public Boolean dhcp() {
        return this.dhcp;
    }
    /**
     * @return Last IP for this region (eg: 192.168.1.24)
     * 
     */
    public String end() {
        return this.end;
    }
    /**
     * @return Global network with cidr (eg: 192.168.1.0/24)
     * 
     */
    public String network() {
        return this.network;
    }
    /**
     * @return Region associated to the subnet
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return First IP for this region (eg: 192.168.1.12)
     * 
     */
    public String start() {
        return this.start;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworkPrivateSubnetsSubnetIpPool defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean dhcp;
        private String end;
        private String network;
        private String region;
        private String start;
        public Builder() {}
        public Builder(GetNetworkPrivateSubnetsSubnetIpPool defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dhcp = defaults.dhcp;
    	      this.end = defaults.end;
    	      this.network = defaults.network;
    	      this.region = defaults.region;
    	      this.start = defaults.start;
        }

        @CustomType.Setter
        public Builder dhcp(Boolean dhcp) {
            if (dhcp == null) {
              throw new MissingRequiredPropertyException("GetNetworkPrivateSubnetsSubnetIpPool", "dhcp");
            }
            this.dhcp = dhcp;
            return this;
        }
        @CustomType.Setter
        public Builder end(String end) {
            if (end == null) {
              throw new MissingRequiredPropertyException("GetNetworkPrivateSubnetsSubnetIpPool", "end");
            }
            this.end = end;
            return this;
        }
        @CustomType.Setter
        public Builder network(String network) {
            if (network == null) {
              throw new MissingRequiredPropertyException("GetNetworkPrivateSubnetsSubnetIpPool", "network");
            }
            this.network = network;
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("GetNetworkPrivateSubnetsSubnetIpPool", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder start(String start) {
            if (start == null) {
              throw new MissingRequiredPropertyException("GetNetworkPrivateSubnetsSubnetIpPool", "start");
            }
            this.start = start;
            return this;
        }
        public GetNetworkPrivateSubnetsSubnetIpPool build() {
            final var _resultValue = new GetNetworkPrivateSubnetsSubnetIpPool();
            _resultValue.dhcp = dhcp;
            _resultValue.end = end;
            _resultValue.network = network;
            _resultValue.region = region;
            _resultValue.start = start;
            return _resultValue;
        }
    }
}
