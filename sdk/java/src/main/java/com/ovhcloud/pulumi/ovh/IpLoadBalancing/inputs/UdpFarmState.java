// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.IpLoadBalancing.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UdpFarmState extends com.pulumi.resources.ResourceArgs {

    public static final UdpFarmState Empty = new UdpFarmState();

    /**
     * Readable label for loadbalancer farm
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Readable label for loadbalancer farm
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Id of your farm.
     * 
     */
    @Import(name="farmId")
    private @Nullable Output<Double> farmId;

    /**
     * @return Id of your farm.
     * 
     */
    public Optional<Output<Double>> farmId() {
        return Optional.ofNullable(this.farmId);
    }

    /**
     * Port attached to your farm ([1..49151]). Inherited from frontend if null
     * 
     */
    @Import(name="port")
    private @Nullable Output<Double> port;

    /**
     * @return Port attached to your farm ([1..49151]). Inherited from frontend if null
     * 
     */
    public Optional<Output<Double>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The internal name of your IP load balancing
     * 
     */
    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    /**
     * @return The internal name of your IP load balancing
     * 
     */
    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * Internal Load Balancer identifier of the vRack private network to attach to your farm, mandatory when your Load Balancer is attached to a vRack
     * 
     */
    @Import(name="vrackNetworkId")
    private @Nullable Output<Double> vrackNetworkId;

    /**
     * @return Internal Load Balancer identifier of the vRack private network to attach to your farm, mandatory when your Load Balancer is attached to a vRack
     * 
     */
    public Optional<Output<Double>> vrackNetworkId() {
        return Optional.ofNullable(this.vrackNetworkId);
    }

    /**
     * Zone where the farm will be defined (ie. `gra`, `bhs` also supports `all`)
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return Zone where the farm will be defined (ie. `gra`, `bhs` also supports `all`)
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private UdpFarmState() {}

    private UdpFarmState(UdpFarmState $) {
        this.displayName = $.displayName;
        this.farmId = $.farmId;
        this.port = $.port;
        this.serviceName = $.serviceName;
        this.vrackNetworkId = $.vrackNetworkId;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UdpFarmState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UdpFarmState $;

        public Builder() {
            $ = new UdpFarmState();
        }

        public Builder(UdpFarmState defaults) {
            $ = new UdpFarmState(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName Readable label for loadbalancer farm
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Readable label for loadbalancer farm
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param farmId Id of your farm.
         * 
         * @return builder
         * 
         */
        public Builder farmId(@Nullable Output<Double> farmId) {
            $.farmId = farmId;
            return this;
        }

        /**
         * @param farmId Id of your farm.
         * 
         * @return builder
         * 
         */
        public Builder farmId(Double farmId) {
            return farmId(Output.of(farmId));
        }

        /**
         * @param port Port attached to your farm ([1..49151]). Inherited from frontend if null
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Double> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port Port attached to your farm ([1..49151]). Inherited from frontend if null
         * 
         * @return builder
         * 
         */
        public Builder port(Double port) {
            return port(Output.of(port));
        }

        /**
         * @param serviceName The internal name of your IP load balancing
         * 
         * @return builder
         * 
         */
        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The internal name of your IP load balancing
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param vrackNetworkId Internal Load Balancer identifier of the vRack private network to attach to your farm, mandatory when your Load Balancer is attached to a vRack
         * 
         * @return builder
         * 
         */
        public Builder vrackNetworkId(@Nullable Output<Double> vrackNetworkId) {
            $.vrackNetworkId = vrackNetworkId;
            return this;
        }

        /**
         * @param vrackNetworkId Internal Load Balancer identifier of the vRack private network to attach to your farm, mandatory when your Load Balancer is attached to a vRack
         * 
         * @return builder
         * 
         */
        public Builder vrackNetworkId(Double vrackNetworkId) {
            return vrackNetworkId(Output.of(vrackNetworkId));
        }

        /**
         * @param zone Zone where the farm will be defined (ie. `gra`, `bhs` also supports `all`)
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone Zone where the farm will be defined (ie. `gra`, `bhs` also supports `all`)
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public UdpFarmState build() {
            return $;
        }
    }

}
