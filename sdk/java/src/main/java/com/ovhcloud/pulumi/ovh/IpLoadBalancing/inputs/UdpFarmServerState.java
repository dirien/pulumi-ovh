// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.IpLoadBalancing.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UdpFarmServerState extends com.pulumi.resources.ResourceArgs {

    public static final UdpFarmServerState Empty = new UdpFarmServerState();

    /**
     * Address of the backend server (IP from either internal or OVHcloud network)
     * 
     */
    @Import(name="address")
    private @Nullable Output<String> address;

    /**
     * @return Address of the backend server (IP from either internal or OVHcloud network)
     * 
     */
    public Optional<Output<String>> address() {
        return Optional.ofNullable(this.address);
    }

    /**
     * Synonym for `farm_id`.
     * 
     */
    @Import(name="backendId")
    private @Nullable Output<Double> backendId;

    /**
     * @return Synonym for `farm_id`.
     * 
     */
    public Optional<Output<Double>> backendId() {
        return Optional.ofNullable(this.backendId);
    }

    /**
     * Label for the server
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Label for the server
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * ID of the farm this server is attached to
     * 
     */
    @Import(name="farmId")
    private @Nullable Output<Double> farmId;

    /**
     * @return ID of the farm this server is attached to
     * 
     */
    public Optional<Output<Double>> farmId() {
        return Optional.ofNullable(this.farmId);
    }

    /**
     * Port that backend will respond on
     * 
     */
    @Import(name="port")
    private @Nullable Output<Double> port;

    /**
     * @return Port that backend will respond on
     * 
     */
    public Optional<Output<Double>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * Id of your server.
     * 
     */
    @Import(name="serverId")
    private @Nullable Output<Double> serverId;

    /**
     * @return Id of your server.
     * 
     */
    public Optional<Output<Double>> serverId() {
        return Optional.ofNullable(this.serverId);
    }

    /**
     * The internal name of your IP load balancing
     * 
     */
    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    /**
     * @return The internal name of your IP load balancing
     * 
     */
    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * backend status - `active` or `inactive`
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return backend status - `active` or `inactive`
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private UdpFarmServerState() {}

    private UdpFarmServerState(UdpFarmServerState $) {
        this.address = $.address;
        this.backendId = $.backendId;
        this.displayName = $.displayName;
        this.farmId = $.farmId;
        this.port = $.port;
        this.serverId = $.serverId;
        this.serviceName = $.serviceName;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UdpFarmServerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UdpFarmServerState $;

        public Builder() {
            $ = new UdpFarmServerState();
        }

        public Builder(UdpFarmServerState defaults) {
            $ = new UdpFarmServerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param address Address of the backend server (IP from either internal or OVHcloud network)
         * 
         * @return builder
         * 
         */
        public Builder address(@Nullable Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address Address of the backend server (IP from either internal or OVHcloud network)
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        /**
         * @param backendId Synonym for `farm_id`.
         * 
         * @return builder
         * 
         */
        public Builder backendId(@Nullable Output<Double> backendId) {
            $.backendId = backendId;
            return this;
        }

        /**
         * @param backendId Synonym for `farm_id`.
         * 
         * @return builder
         * 
         */
        public Builder backendId(Double backendId) {
            return backendId(Output.of(backendId));
        }

        /**
         * @param displayName Label for the server
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Label for the server
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param farmId ID of the farm this server is attached to
         * 
         * @return builder
         * 
         */
        public Builder farmId(@Nullable Output<Double> farmId) {
            $.farmId = farmId;
            return this;
        }

        /**
         * @param farmId ID of the farm this server is attached to
         * 
         * @return builder
         * 
         */
        public Builder farmId(Double farmId) {
            return farmId(Output.of(farmId));
        }

        /**
         * @param port Port that backend will respond on
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Double> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port Port that backend will respond on
         * 
         * @return builder
         * 
         */
        public Builder port(Double port) {
            return port(Output.of(port));
        }

        /**
         * @param serverId Id of your server.
         * 
         * @return builder
         * 
         */
        public Builder serverId(@Nullable Output<Double> serverId) {
            $.serverId = serverId;
            return this;
        }

        /**
         * @param serverId Id of your server.
         * 
         * @return builder
         * 
         */
        public Builder serverId(Double serverId) {
            return serverId(Output.of(serverId));
        }

        /**
         * @param serviceName The internal name of your IP load balancing
         * 
         * @return builder
         * 
         */
        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The internal name of your IP load balancing
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param status backend status - `active` or `inactive`
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status backend status - `active` or `inactive`
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public UdpFarmServerState build() {
            return $;
        }
    }

}
