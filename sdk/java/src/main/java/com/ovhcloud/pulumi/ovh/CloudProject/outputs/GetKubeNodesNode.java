// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.CloudProject.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetKubeNodesNode {
    /**
     * @return Creation date
     * 
     */
    private String createdAt;
    /**
     * @return (Optional) Date of the effective deployment
     * 
     */
    private String deployedAt;
    /**
     * @return Flavor name
     * 
     */
    private String flavor;
    /**
     * @return ID of the node
     * 
     */
    private String id;
    /**
     * @return Openstack ID of the underlying VM of the node
     * 
     */
    private String instanceId;
    /**
     * @return Is the node in the target version of the cluster
     * 
     */
    private Boolean isUpToDate;
    /**
     * @return Name of the node
     * 
     */
    private String name;
    /**
     * @return Managed kubernetes node pool ID
     * 
     */
    private String nodePoolId;
    /**
     * @return Public cloud project ID
     * 
     */
    private String projectId;
    /**
     * @return Current status
     * 
     */
    private String status;
    /**
     * @return Last update date
     * 
     */
    private String updatedAt;
    /**
     * @return Version in which the node is
     * 
     */
    private String version;

    private GetKubeNodesNode() {}
    /**
     * @return Creation date
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return (Optional) Date of the effective deployment
     * 
     */
    public String deployedAt() {
        return this.deployedAt;
    }
    /**
     * @return Flavor name
     * 
     */
    public String flavor() {
        return this.flavor;
    }
    /**
     * @return ID of the node
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Openstack ID of the underlying VM of the node
     * 
     */
    public String instanceId() {
        return this.instanceId;
    }
    /**
     * @return Is the node in the target version of the cluster
     * 
     */
    public Boolean isUpToDate() {
        return this.isUpToDate;
    }
    /**
     * @return Name of the node
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Managed kubernetes node pool ID
     * 
     */
    public String nodePoolId() {
        return this.nodePoolId;
    }
    /**
     * @return Public cloud project ID
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return Current status
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Last update date
     * 
     */
    public String updatedAt() {
        return this.updatedAt;
    }
    /**
     * @return Version in which the node is
     * 
     */
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKubeNodesNode defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createdAt;
        private String deployedAt;
        private String flavor;
        private String id;
        private String instanceId;
        private Boolean isUpToDate;
        private String name;
        private String nodePoolId;
        private String projectId;
        private String status;
        private String updatedAt;
        private String version;
        public Builder() {}
        public Builder(GetKubeNodesNode defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdAt = defaults.createdAt;
    	      this.deployedAt = defaults.deployedAt;
    	      this.flavor = defaults.flavor;
    	      this.id = defaults.id;
    	      this.instanceId = defaults.instanceId;
    	      this.isUpToDate = defaults.isUpToDate;
    	      this.name = defaults.name;
    	      this.nodePoolId = defaults.nodePoolId;
    	      this.projectId = defaults.projectId;
    	      this.status = defaults.status;
    	      this.updatedAt = defaults.updatedAt;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetKubeNodesNode", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder deployedAt(String deployedAt) {
            if (deployedAt == null) {
              throw new MissingRequiredPropertyException("GetKubeNodesNode", "deployedAt");
            }
            this.deployedAt = deployedAt;
            return this;
        }
        @CustomType.Setter
        public Builder flavor(String flavor) {
            if (flavor == null) {
              throw new MissingRequiredPropertyException("GetKubeNodesNode", "flavor");
            }
            this.flavor = flavor;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetKubeNodesNode", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceId(String instanceId) {
            if (instanceId == null) {
              throw new MissingRequiredPropertyException("GetKubeNodesNode", "instanceId");
            }
            this.instanceId = instanceId;
            return this;
        }
        @CustomType.Setter
        public Builder isUpToDate(Boolean isUpToDate) {
            if (isUpToDate == null) {
              throw new MissingRequiredPropertyException("GetKubeNodesNode", "isUpToDate");
            }
            this.isUpToDate = isUpToDate;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetKubeNodesNode", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nodePoolId(String nodePoolId) {
            if (nodePoolId == null) {
              throw new MissingRequiredPropertyException("GetKubeNodesNode", "nodePoolId");
            }
            this.nodePoolId = nodePoolId;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetKubeNodesNode", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetKubeNodesNode", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            if (updatedAt == null) {
              throw new MissingRequiredPropertyException("GetKubeNodesNode", "updatedAt");
            }
            this.updatedAt = updatedAt;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetKubeNodesNode", "version");
            }
            this.version = version;
            return this;
        }
        public GetKubeNodesNode build() {
            final var _resultValue = new GetKubeNodesNode();
            _resultValue.createdAt = createdAt;
            _resultValue.deployedAt = deployedAt;
            _resultValue.flavor = flavor;
            _resultValue.id = id;
            _resultValue.instanceId = instanceId;
            _resultValue.isUpToDate = isUpToDate;
            _resultValue.name = name;
            _resultValue.nodePoolId = nodePoolId;
            _resultValue.projectId = projectId;
            _resultValue.status = status;
            _resultValue.updatedAt = updatedAt;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
