// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudproject

import (
	"context"
	"reflect"

	"github.com/ovh/pulumi-ovh/sdk/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a volume in a public cloud project
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ovh/pulumi-ovh/sdk/go/ovh/CloudProject"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := CloudProject.GetVolume(ctx, &cloudproject.GetVolumeArgs{
//				RegionName:  "xxx",
//				ServiceName: "yyy",
//				VolumeId:    "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetVolume(ctx *pulumi.Context, args *GetVolumeArgs, opts ...pulumi.InvokeOption) (*GetVolumeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetVolumeResult
	err := ctx.Invoke("ovh:CloudProject/getVolume:getVolume", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVolume.
type GetVolumeArgs struct {
	// A valid OVHcloud public cloud region name in which the volume is available. Ex.: "GRA11".
	RegionName string `pulumi:"regionName"`
	// The id of the public cloud project.
	ServiceName string `pulumi:"serviceName"`
	// Volume id to get the informations
	VolumeId string `pulumi:"volumeId"`
}

// A collection of values returned by getVolume.
type GetVolumeResult struct {
	Id string `pulumi:"id"`
	// The name of the volume (E.g.: "GRA", meaning Gravelines, for region "GRA1")
	Name string `pulumi:"name"`
	// The region name where volume is available
	RegionName string `pulumi:"regionName"`
	// The id of the public cloud project.
	ServiceName string `pulumi:"serviceName"`
	// The size of the volume
	Size float64 `pulumi:"size"`
	// The id of the volume
	VolumeId string `pulumi:"volumeId"`
}

func GetVolumeOutput(ctx *pulumi.Context, args GetVolumeOutputArgs, opts ...pulumi.InvokeOption) GetVolumeResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetVolumeResultOutput, error) {
			args := v.(GetVolumeArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetVolumeResult
			secret, err := ctx.InvokePackageRaw("ovh:CloudProject/getVolume:getVolume", args, &rv, "", opts...)
			if err != nil {
				return GetVolumeResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetVolumeResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetVolumeResultOutput), nil
			}
			return output, nil
		}).(GetVolumeResultOutput)
}

// A collection of arguments for invoking getVolume.
type GetVolumeOutputArgs struct {
	// A valid OVHcloud public cloud region name in which the volume is available. Ex.: "GRA11".
	RegionName pulumi.StringInput `pulumi:"regionName"`
	// The id of the public cloud project.
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
	// Volume id to get the informations
	VolumeId pulumi.StringInput `pulumi:"volumeId"`
}

func (GetVolumeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeArgs)(nil)).Elem()
}

// A collection of values returned by getVolume.
type GetVolumeResultOutput struct{ *pulumi.OutputState }

func (GetVolumeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeResult)(nil)).Elem()
}

func (o GetVolumeResultOutput) ToGetVolumeResultOutput() GetVolumeResultOutput {
	return o
}

func (o GetVolumeResultOutput) ToGetVolumeResultOutputWithContext(ctx context.Context) GetVolumeResultOutput {
	return o
}

func (o GetVolumeResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the volume (E.g.: "GRA", meaning Gravelines, for region "GRA1")
func (o GetVolumeResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeResult) string { return v.Name }).(pulumi.StringOutput)
}

// The region name where volume is available
func (o GetVolumeResultOutput) RegionName() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeResult) string { return v.RegionName }).(pulumi.StringOutput)
}

// The id of the public cloud project.
func (o GetVolumeResultOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeResult) string { return v.ServiceName }).(pulumi.StringOutput)
}

// The size of the volume
func (o GetVolumeResultOutput) Size() pulumi.Float64Output {
	return o.ApplyT(func(v GetVolumeResult) float64 { return v.Size }).(pulumi.Float64Output)
}

// The id of the volume
func (o GetVolumeResultOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeResult) string { return v.VolumeId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetVolumeResultOutput{})
}
